set statusline^=%{coc#status()}

" basics
autocmd ColorScheme * hi CocErrorHighlight ctermfg=Red  guifg=#ff0000
autocmd ColorScheme * hi CocWarningHighlight ctermfg=Yellow  guifg=#ff0000

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gR <plug>(coc-rename)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> <Leader>r :GoRun<CR>

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

let g:coc_global_extensions = [
    \'coc-dictionary',
    \'coc-word',
    \'coc-vimlsp',
    \'coc-neosnippet',
    \'coc-yaml',
    \'coc-sh',
    \'coc-pyright',
    \'coc-perl',
    \'coc-markdownlint',
    \'coc-json',
    \'coc-go'
\]
