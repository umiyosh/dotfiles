" basic setting

let g:coc_config_home = '~/dotfiles_private/'
" set updatetime=300
set statusline^=%{coc#status()}
autocmd ColorScheme * hi CocErrorHighlight ctermfg=Red  guifg=#ff0000
autocmd ColorScheme * hi CocWarningHighlight ctermfg=Yellow  guifg=#ff0000
autocmd ColorScheme * hi CocInfoSign ctermfg=Green  guifg=#ff0000

" tile type setting
autocmd FileType markdown let b:coc_suggest_disable = 1
autocmd FileType text let b:coc_suggest_disable = 1

" Don't break line on Enter when displaying completion
inoremap <expr><CR>  pumvisible() ? "<C-y>" : "<CR>"

" coc keymap
nmap <silent> gp <Plug>(coc-diagnostic-prev)
nmap <silent> gb <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gR <plug>(coc-rename)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> <Leader>r :GoRun<CR>

vmap <leader>d <Plug>(coc-codeaction-selected)
nmap <leader>d <Plug>(coc-codeaction-selected)
" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" coc extentions
let g:coc_global_extensions = [
    \'coc-spell-checker',
    \'coc-actions',
    \'coc-dictionary',
    \'coc-word',
    \'coc-vimlsp',
    \'coc-neosnippet',
    \'coc-yaml',
    \'coc-sh',
    \'coc-pyright',
    \'coc-perl',
    \'coc-json',
    \'coc-go'
\]
