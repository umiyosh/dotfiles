#!/usr/bin/env python

# -*- coding: utf-8 -*-

import argparse
import os
import sys
import time
import traceback
from logging import DEBUG, Formatter, getLogger

import delegator
import zgitignore
from rainbow_logging_handler import RainbowLoggingHandler
from watchdog.events import RegexMatchingEventHandler
from watchdog.observers import Observer

BASEDIR = os.path.abspath('./')


class FSHandler(RegexMatchingEventHandler):
    u"""ChangeHandler"""

    def __init__(self, cmd, mode, ignore_regexes, timeout):
        u"""__init__

        :param cmd: command ,  str
        :param mode: quiet mode , boolian
        :param ignore_regexes: ignore regexp csv pttern, str
        :param timeout: timeout sec, int
        """
        RegexMatchingEventHandler.__init__(self, ignore_regexes=ignore_regexes)
        self.cmd = cmd
        self.mode = mode
        self.timeout = timeout
        self.logger = self._get_logger()

        ignorefile = zgitignore.ZgitIgnore(ignore_case=True)
        if os.path.exists('./.gitignore'):
            with open('./.gitignore', 'r') as f:
                ignorefile.add_patterns(f.read().splitlines())
        self.ignore = ignorefile

    def _get_logger(self):
        u"""get_logger"""
        logger = getLogger(__name__)
        if self.mode:
            formatter = Formatter('%(message)s')
        else:
            formatter = Formatter('%(asctime)s [%(module)s] - : %(message)s')
        handler = RainbowLoggingHandler(sys.stderr)
        handler.setFormatter(formatter)
        logger.setLevel(DEBUG)
        logger.propagate = False
        logger.addHandler(handler)
        return logger

    def on_created(self, event):
        u"""on_created

        :param event:
        """
        if self.ignore.is_ignored(event.src_path):
            return
        if event.is_directory:
            return
        self.logger.warn('%s has been created.' % event.src_path)
        self._run()

    def on_modified(self, event):
        u"""on_modified

        :param event:
        """
        if self.ignore.is_ignored(event.src_path):
            return
        if event.is_directory:
            return
        self.logger.warn('%s has been modified.' % event.src_path)
        self._run()

    def on_deleted(self, event):
        u"""on_deleted

        :param event:
        """
        if self.ignore.is_ignored(event.src_path):
            return
        if event.is_directory:
            return
        self.logger.warn('%s has been deleted.' % event.src_path)
        self._run()

    def debug_run(self):
        u"""debug_run"""
        self._run()

    def _run(self):
        u"""run"""
        try:
            result = delegator.chain(self.cmd, timeout=self.timeout)
            result.block()
        except Exception as e:
            self.logger.critical('EXCEPTION OCCUR')
            self.logger.critical(e)
            self.logger.critical(traceback.format_exc())
            return

        if result.return_code == 0:
            completion = True
        else:
            completion = False

        for result_line in result.out.split('\n'):
            self.logger.info(result_line)
        if completion:
            self.logger.info('COMPLETION: %s' % result.return_code)
        else:
            self.logger.critical('COMPLETION: %s' % result.return_code)


def arg_parse():
    u"""arg_parse"""
    parser = argparse.ArgumentParser(
        description='Execute the command when file event is issued')
    parser.add_argument(
        '-c',
        '--command',
        dest='command',
        type=str,
        help='execute command',
        required=True)
    parser.add_argument(
        '-i',
        '--ignore',
        dest='ignore',
        type=str,
        help='ignore pattern regexp',
        required=False)
    parser.add_argument(
        '-q',
        '--quiet',
        dest='quiet',
        action='store_true',
        help='quiet mode',
        required=False),
    parser.add_argument(
        '-t',
        '--timeout',
        dest='timeout',
        type=int,
        help='timeout [sec]',
        required=False)
    parser.add_argument(
        '-d',
        '--debug',
        dest='debug',
        action='store_true',
        help='debug mode',
        required=False)
    parser.set_defaults(quiet=False, timeout=90)
    return parser.parse_args()


def convert_to_regexp(pattern_str):
    u"""convert_to_regexp

    :param pettern_str:
    """
    patterns = []
    pattern_str = str(pattern_str)
    for pattern in pattern_str.split(','):
        patterns.append('r"{0}"'.format(pattern))
    return patterns


def watchrun():
    u"""watchdog_loop_main"""
    args = arg_parse()
    ignore_patterns = convert_to_regexp(args.ignore)
    ignore_patterns.extend([r".+/.git", r".+/.svn", r".+/data", r".+pyc"])
    while True:
        event_handler = FSHandler(
            cmd=args.command,
            mode=args.quiet,
            ignore_regexes=ignore_patterns,
            timeout=args.timeout)
        if args.debug:
            event_handler.debug_run()
            sys.exit(0)
        observer = Observer()
        observer.schedule(event_handler, BASEDIR, recursive=True)
        observer.start()
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            observer.stop()
        observer.join()


if __name__ in '__main__':
    watchrun()
