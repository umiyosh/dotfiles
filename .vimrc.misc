"-------------------------------------------------------------------------------
" その他 Misc
"-------------------------------------------------------------------------------
"改行を含まず行末までヤンク
nnoremap Y y$

" Open junk file.
command! -nargs=0 JunkFile call s:open_junk_file()
function! s:open_junk_file()
  let l:junk_dir = $HOME . '/.vim_junk'. strftime('/%Y/%m')
  if !isdirectory(l:junk_dir)
    call mkdir(l:junk_dir, 'p')
  endif

  let l:filename = input('Junk Code: ', l:junk_dir.strftime('/%Y-%m-%d-%H%M%S.'))
  if l:filename != ''
    execute 'edit ' . l:filename
  endif
endfunction"}}}

"行番号つきののコピー
vnoremap <F10> <ESC>:%!cat -n\|perl -pe 's:^ +::g'<CR>gvyugv<ESC>

"perlの野良ライブラリの読み込み
autocmd FileType perl set isfname-=-
autocmd FileType perl :setlocal path+=lib;/

"perl整形
map ,pt  <ESC>:%!     $HOME/perl5/perlbrew/perls/perl-5.14.2/bin/perltidy<CR>
map ,ptv <ESC>:'<,'>! $HOME/perl5/perlbrew/perls/perl-5.14.2/bin/perltidy<CR>
"perlデバッガ
map <F5> <ESC>:! perl -d %:p<CR>

"Textile2markdown for OSX
"needs pandoc command
command! -nargs=0 Textile2markdown call <SID>Textile2markdown()
noremap <Leader>tm :Textile2markdown<CR>
function! s:Textile2markdown()
  let result = system("$HOME/dotfiles/bin/textile2markdown.rb " . shellescape(expand('%')) . '|pbcopy'  )
endfunction

"Markdown2textile fo OSX
"needs pandoc command
command! -nargs=0 Markdown2textile call <SID>Markdown2textile()
noremap <Leader>mt :Markdown2textile<CR>
function! s:Markdown2textile()
  let result = system('pandoc -t textile ' . shellescape(expand('%')) . '|pbcopy'  )
endfunction

" 文字数カウント
vnoremap <leader>ii :call Count_Char()<cr>
function! Count_Char() range
    silent normal gvy
    let str = @@
    normal `<
    let start_line_num = line('.')
    normal `>
    let end_line_num = line('.')
    let linenum = end_line_num - start_line_num + 1

perl << EOF
use strict;
use warnings;
use utf8;
use Encode qw/decode/;

my $str = decode('utf-8', VIM::Eval('str'));
my $line_num = VIM::Eval('linenum');
my $gross_words = length $str;

VIM::Msg("選択範囲の行数は $line_num です");
VIM::Msg("選択範囲の総文字数は $gross_words です");
EOF
endfunction

" 矩形選択の挙動変更(行ビジュアルでもI, Aを使えるようにする)
" http://labs.timedia.co.jp/2012/10/vim-more-useful-blockwise-insertion.html
vnoremap <expr> I  <SID>force_blockwise_visual('I')
vnoremap <expr> A  <SID>force_blockwise_visual('A')

function! s:force_blockwise_visual(next_key)
  if mode() ==# 'v'
    return "\<C-v>" . a:next_key
  elseif mode() ==# 'V'
    return "\<C-v>0o$" . a:next_key
  else  " mode() ==# "\<C-v>"
    return a:next_key
  endif
endfunction
