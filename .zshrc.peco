# peco
# TODO autoload化 http://qiita.com/mollifier/items/6fdeff2750fe80f830c8
alias -g P='| p'

function pecoPipe() {
  peco | pecoAfterAction "vi" \
    'zip -e ./archive.$(date +%Y%m%d%H%M%S).zip' \
    'tar cvfz ./archive.$(date +%Y%m%d%H%M%S).tar.gz' \
    "%%STDIN%% paaSafeRm" \
    "paaInputCommandAny" \
    "%%STDIN%% pbcopy" \
    "%%STDIN%% paaExecuteAsCommand"
}
alias p=pecoPipe

function pecoCdr() {
  dirs -l|perl -pe 's/ /\n/g'| peco | pecoAfterAction "cd"
}
alias cdr=pecoCdr

function pecoKill() {
    for pid in `ps aux | peco | awk '{ print $2 }'`
    do
        kill $pid
        echo "Killed ${pid}"
    done
}
alias pk="pecoKill"

function pecoAg () {
  ag $@  | peco  | awk -F : '{print "-c " $2 " " $1}' | pecoAfterAction "vi"
}
alias agv=pecoAg

function pecoAck () {
  ack $@  | peco | awk -F : '{print "-c " $2 " " $1}' | pecoAfterAction "vi"
}
alias ackv=pecoAck

function pecoLs(){
  searchPath=$@
  if [[ -z $searchPath ]]; then
    searchPath="."
  fi
  if [[ $searchPath != "." && ! $searchPath  =~ "/$" ]]; then
    searchPath=$searchPath/
  fi

  find $searchPath -maxdepth 0 -print0 |xargs -0 ls -al | \
    peco | perl -lane 'print "@F[8..$#F]"' | pecoAfterAction "vi" \
      "cd" \
      'zip -e ./archive.$(date +%Y%m%d%H%M%S).zip' \
      'tar cvfz ./archive.$(date +%Y%m%d%H%M%S).tar.gz' \
      "%%STDIN%% paaSafeRm" \
      "paaInputCommandAny" \
      "%%STDIN%% pbcopy" \
      "%%STDIN%% paaExecuteAsCommand"
}
alias l=pecoLs

function pecoFind() {
  find $@ | peco | pecoAfterAction "vi" \
    "cd" \
    'zip -e ./archive.$(date +%Y%m%d%H%M%S).zip' \
    'tar cvfz ./archive.$(date +%Y%m%d%H%M%S).tar.gz' \
    "%%STDIN%% paaSafeRm" \
    "paaInputCommandAny" \
    "%%STDIN%% pbcopy" \
    "%%STDIN%% paaExecuteAsCommand"
}
alias fpe=pecoFind
alias r="fpe ~/bin/ ~/dotfiles/bin/ ~/local/bin/ -type f"

function pecoLocate() {
  locate $@ | peco | pecoAfterAction "vi" \
    "cd" \
    'zip -e ./archive.$(date +%Y%m%d%H%M%S).zip' \
    'tar cvfz ./archive.$(date +%Y%m%d%H%M%S).tar.gz' \
    "%%STDIN%% paaSafeRm" \
    "paaInputCommandAny" \
    "%%STDIN%% pbcopy" \
    "%%STDIN%% paaExecuteAsCommand"
}
alias lpe=pecoLocate

function pecoMdfind() {
  mdfind $@ | peco | pecoAfterAction "vi" \
    "cd" \
    'zip -e ./archive.$(date +%Y%m%d%H%M%S).zip' \
    'tar cvfz ./archive.$(date +%Y%m%d%H%M%S).tar.gz' \
    "%%STDIN%% paaSafeRm" \
    "paaInputCommandAny" \
    "%%STDIN%% pbcopy" \
    "%%STDIN%% paaExecuteAsCommand"
}
alias mpe=pecoMdfind

function pecoGitStatus() {
  gitRootDir=$(git rev-parse --show-toplevel)
  cd "$gitRootDir"
  workDir=$(pwd)
  (git status --porcelain;git ls-files) | peco | awk 'BEGIN{FS= " "}{print $NF}'| \
    pecoAfterAction "git add" \
      "git checkout" \
      "git reset HEAD" \
      "git diff" \
      "git diff --cached" \
      "git rm" \
      "%%STDIN%% pbcopy" \
      "vi" \
      "%%STDIN%% paaSafeRm" \
      "paaInputCommandAny"
  cd "$workDir"
}
alias gps=pecoGitStatus

function pecoGitBranch() {
  (git branch |perl -pe 's/^\* //g';git branch -r;git tag )|perl -pe 's/^ +//g'| peco | awk 'BEGIN{FS= " "}{print $NF}'| \
    pecoAfterAction "git checkout" \
      "git checkout " \
      "git checkout -t" \
      "git branch -d" \
      "git branch -D" \
      "git diff" \
      "git reset --soft" \
      "git reset --hard" \
      "git push origin" \
      "git pull origin" \
      "%%STDIN%% pbcopy" \
      "paaInputCommandAny"
}
alias gpb=pecoGitBranch

function pecoGitLog() {
 git log --date=iso --pretty=format:'%h - <%an> %ce - %cd - %d %s ' --abbrev-commit \
  | peco | awk 'BEGIN{FS= " "}{print $1}'| \
    pecoAfterAction "%%STDIN%% pbcopy" \
      "git show" \
      "git checkout" \
      "git checkout " \
      "git checkout -t" \
      "git diff" \
      "git reset --soft" \
      "git reset --hard" \
      "paaInputCommandAny"
}
alias gpl=pecoGitLog

function pecoGitRefLog() {
 git reflog | peco | awk 'BEGIN{FS= " "}{print $1}'| \
    pecoAfterAction "%%STDIN%% pbcopy" \
      "git show" \
      "git checkout" \
      "git checkout " \
      "git checkout -t" \
      "git diff" \
      "git reset --soft" \
      "git reset --hard" \
      "paaInputCommandAny"
}
alias gpr=pecoGitRefLog

function _sshSourceAction() {
  # candidates was written by NAKAMURA Yoshitaka
  # Copyright (c) 2011, NAKAMURA Yoshitaka
  # All rights reserved. BSD-3.
  # https://github.com/zsh-users/zaw/blob/master/LICENSE
  local -a _global_ssh_known_hosts _global_ssh_known_hosts2 _ssh_known_hosts _ssh_known_hosts2 _etc_hosts _ssh_config_hosts
  [ -r /etc/ssh/ssh_known_hosts ] && _global_ssh_known_hosts=(${${${(f)"$(< /etc/ssh/ssh_known_hosts)"}%%\ *}%%,*}) 2>/dev/null || _global_ssh_known_hosts=()
  [ -r /etc/ssh/ssh_known_hosts2 ] && _global_ssh_known_hosts2=(${${${(f)"$(< /etc/ssh/ssh_known_hosts2)"}%%\ *}%%,*}) 2>/dev/null || _global_ssh_known_hosts2=()
  [ -r "$HOME/.ssh/known_hosts" ] && _ssh_known_hosts=(${${${(f)"$(< ~/.ssh/known_hosts)"}%%\ *}%%,*}) 2>/dev/null || _ssh_known_hosts=()
  [ -r "$HOME/.ssh/known_hosts2" ] && _ssh_known_hosts=(${${${(f)"$(< ~/.ssh/known_hosts2)"}%%\ *}%%,*}) 2>/dev/null || _ssh_known_hosts2=()
  [ -r /etc/hosts ] && : ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}} || _etc_hosts=()
  [ -r "$HOME/.ssh/config" ] && _ssh_config_hosts=(${${${(@M)${(f)"$(< ~/.ssh/config)"}:#Host *}#Host }:#*[*?]*}) || _ssh_config_hosts=()
  candidates=(
    $_global_ssh_known_hosts[@]
    $_global_ssh_known_hosts2[@]
    $_ssh_known_hosts[@]
    $_ssh_known_hosts2[@]
    $_etc_hosts[@]
    $_ssh_config_hosts[@]
    "$HOST"
    ::1
    localhost
    127.0.0.1
  )
  echo $(echo $candidates |perl -pe 's/ /\n/g'|sort |uniq)
}

function pecoSsh() {
  candidates=($(_sshSourceAction))
  for candidate in $candidates; do
    echo $candidate
  done | peco | sort | uniq | pecoAfterAction "ssh"
}
alias ss=pecoSsh

function pecoTssh() {
  candidates=($(_sshSourceAction))
  for candidate in $candidates; do
    echo $candidate
  done | peco | sort | uniq | pecoAfterAction "tssh"
}
alias tss=pecoTssh

# %%STDIN%% command => Sournce | command
# command           => tmux send-keys command Source
function pecoAfterAction() {
  Actions=($@)
  Source=( ${(@f)"$(< /dev/stdin)"} )
  if [[ $#Actions -gt 1 ]]; then
    Action=$(for Action in $Actions ;do echo $Action;done|peco --prompt "SELECT ACTION >>"|head -1)
  else
    Action=$Actions
  fi
  if [[ -z $Source || -z $Action ]]; then
    echo
    echo nothing selected
    return
  fi
  if [[ $Action =~ ^%%STDIN%% ]]; then
    Action=$(echo $Action | perl -pe 's/^%%STDIN%% +//g')
    for selected in $Source; do
      echo $selected
    done | $Action
  else
    tmux send-keys "$Action $Source" C-m
  fi
}

# peco after action define
function paaInputCommandAny() {
  echo -n "command?:"
  read command
  eval $command $@
}

function paaSafeRm() {
  files=( ${(@f)"$(< /dev/stdin)"} )
  for file in $files; do
    rm -ri "$file" </dev/tty
  done
}

function paaExecuteAsCommand() {
  Actions=( ${(@f)"$(< /dev/stdin)"} )
  for Action in $Actions; do
    if [[ $Action =~ ^/ ]]; then
      tmux send-keys "$Action" C-m
    else
      tmux send-keys "./$Action" C-m
    fi
  done
}

function zlePasteBuffer() {
  Selected=( ${(@f)"$(< /dev/stdin)"} )
  pasteBuf=$Selected[1]
  shift Selected
  for Action in $Selected; do
      pasteBuf="$pasteBuf ;$Action"
  done
  BUFFER=$pasteBuf
  CURSOR=$#BUFFER
  zle clear-screen
}
function zleExecuteAsCommand() {
  Selected=( ${(@f)"$(< /dev/stdin)"} )
  pasteBuf=$Selected[1]
  shift Selected
  for Action in $Selected; do
      pasteBuf="$pasteBuf ;$Action"
  done
  BUFFER=$pasteBuf
  zle accept-line
}

# Widgets
## git add をpecoでする
## http://petitviolet.hatenablog.com/entry/20140722/1406034439
function peco-select-gitadd() {
    local SELECTED_FILE_TO_ADD="$(git status --porcelain | \
                                  peco --query "$LBUFFER" | \
                                  awk -F ' ' '{print $NF}')"
    if [ -n "$SELECTED_FILE_TO_ADD" ]; then
      BUFFER="git add $(echo "$SELECTED_FILE_TO_ADD" | tr '\n' ' ')"
      CURSOR=$#BUFFER
    fi
    zle accept-line
}
zle -N peco-select-gitadd
bindkey "^a^a" peco-select-gitadd

# peco history
function pecoHistory() {
    history 0 | tail -r | perl -lane 'print "@F[1..$#F]"' |peco --query "$LBUFFER"| \
      pecoAfterAction \
        "%%STDIN%% zleExecuteAsCommand" \
        "%%STDIN%% zlePasteBuffer" \
        "%%STDIN%% pbcopy"
}
zle -N pecoHistory
bindkey '^r' pecoHistory

# peco autojump
function pecoAutojump() {
    autojump --stat | perl -e '
      while(<>){push @line, $_}
      for $jumplist (reverse @line){
        @jumplist = split /\t/, $jumplist;
        $jumplist[1] =~ s/ /\\ /g;
        print "$jumplist[1]"
      }'|egrep -v '^\\ ' |peco --query "$LBUFFER"| \
        pecoAfterAction \
          "%%STDIN%% zleExecuteAsCommand" \
          "%%STDIN%% zlePasteBuffer" \
          "%%STDIN%% pbcopy"
}
zle -N pecoAutojump
bindkey '^j' pecoAutojump
