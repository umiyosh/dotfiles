scriptencoding utf-8
"------------------------------------
" deoplete.vim
"------------------------------------
" AutoComplPopを無効にする
let g:acp_enableAtStartup = 0
" deopleteを有効にする
let g:deoplete#enable_at_startup = 1
" 補完が自動で開始される文字数
let g:deoplete#auto_completion_start_length = 1
" smarrt case有効化。 大文字が入力されるまで大文字小文字の区別を無視する
let g:deoplete#enable_smart_case = 1
" シンタックスをキャッシュするときの最小文字長を3に
let g:deoplete#sources#syntax#min_keyword_length = 3
" deopleteを自動的にロックするバッファ名のパターン
let g:deoplete#lock_buffer_name_pattern = '\*ku\*'
" 補完候補の一番先頭を選択状態にする(AutoComplPopと似た動作)
let g:deoplete#enable_auto_select = 1
"ポップアップメニューで表示される候補の数。初期値は100
let g:deoplete#max_list = 20
"insertモード カーソルキー移動時にポップアップ抑止
let g:deoplete#enable_insert_char_pre=1
" Define dictionary.
let g:deoplete#sources#dictionary#dictionaries = {
  \ 'default' : '',
  \ 'vimshell' : $HOME.'/.vimshell_hist',
  \ 'scala' : $HOME.'/.vim/bundle/vim-scala/dict/scala.dict',
  \ 'java' : $HOME.'/.vim/dict/java.dict',
  \ 'c' : $HOME.'/.vim/dict/c.dict',
  \ 'cpp' : $HOME.'/.vim/dict/cpp.dict',
  \ 'javascript' : $HOME.'/.vim/dict/javascript.dict',
  \ 'ocaml' : $HOME.'/.vim/dict/ocaml.dict',
  \ 'perl' : $HOME.'/.vim/dict/perl.dict',
  \ 'php' : $HOME.'/.vim/dict/php.dict',
  \ 'scheme' : $HOME.'/.vim/dict/scheme.dict',
  \ 'vm' : $HOME.'/.vim/dict/vim.dict'
  \ }

" Define keyword.
if !exists('g:deoplete#keyword_patterns')
    let g:deoplete#keyword_patterns = {}
endif
let g:deoplete#keyword_patterns['default'] = '\h\w*'

let g:neosnippet#disable_runtime_snippets = {'_' : 1}
" ユーザー定義スニペット保存ディレクトリ
let g:neosnippet#snippets_directory = $HOME.'/.vim/snippets'

"スニペット展開
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

"スニペット編集
nnoremap sS  :NeoSnippetEdit<CR>

"vim-snippets用: snipMate 互換関数を使えるようにする
let g:neosnippet#enable_snipmate_compatibility = 1

" C-nでdeoplete補完
inoremap <expr><C-n>  pumvisible() ? "\<C-n>" : "\<C-x>\<C-u>\<C-p>"
" C-pでkeyword補完
inoremap <expr><C-p> pumvisible() ? "\<C-p>" : "\<C-p>\<C-n>"
" 補完候補が出ていたら確定、なければ改行
inoremap <expr><CR>  pumvisible() ? deoplete#close_popup() : "<CR>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-x><C-o> &filetype == 'vim' ? "\<C-x><C-v><C-p>" : deoplete#start_manual_complete()

" buffer開いたらneoconでcache
autocmd BufReadPost,BufEnter,BufWritePost :deopleteBufferMakeCache <buffer>

" FileType毎のOmni補完を設定
"" omni補完時のプレビューウィンドウ抑止
set completeopt-=preview
"" python jedi-vim設定
autocmd FileType python setlocal omnifunc=jedi#completions
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#rename_command = '<Leader>r'
if !exists('g:deoplete#force_omni_input_patterns')
        let g:deoplete#force_omni_input_patterns = {}
endif
let g:deoplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'

autocmd FileType python let b:did_ftplugin = 1

autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html       setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType css        setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType xml        setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType c          setlocal omnifunc=ccomplete#Complete
autocmd FileType ruby       setlocal omnifunc=rubycomplete#Complete

" Enable heavy omni completion.
if !exists('g:deoplete#sources#omni#input_patterns')
  let g:deoplete#sources#omni#input_patterns = {}
endif
let g:deoplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
let g:deoplete#sources#omni#input_patterns.c = '\%(\.\|->\)\h\w*'
let g:deoplete#sources#omni#input_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'

"インクルードパスの指定
let g:deoplete#sources#include#paths = {
  \ 'cpp'  : '.,/opt/local/include/gcc46/c++,/opt/local/include,/usr/include',
  \ 'c'    : '.,/usr/include',
  \ 'ruby' : '.,$HOME/.rvm/rubies/**/lib/ruby/1.8/',
  \ }
"インクルード文のパターンを指定
let g:deoplete#sources#include#patterns = {
  \ 'cpp' : '^\s*#\s*include',
  \ 'ruby' : '^\s*require',
  \ 'perl' : '^\s*use',
  \ }
"インクルード先のファイル名の解析パターン
let g:deoplete#sources#include#exprs = {
  \ 'ruby' : substitute(v:fname,'::','/','g')
  \ }
" ファイルを探す際に、この値を末尾に追加したファイルも探す。
let g:neocomplcache_include_suffixes = {
  \ 'ruby' : '.rb',
  \ 'haskell' : '.hs'
  \ }

" for neco-look
let g:deoplete#text_mode_filetypes = { "_" : 1 }
