"/-------------------------------------------------------------------------------
" プラグインごとの設定 Plugins
"-------------------------------------------------------------------------------

"------------------------------------
" Align
"------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"------------------------------------
" NERD_commenter.vim
"------------------------------------
" コメントの間にスペースを空ける
let NERDSpaceDelims = 1
"<Leader>xでコメントをトグル(NERD_commenter.vim)
map <Leader>x <Leader>c<space>
""未対応ファイルタイプのエラーメッセージを表示しない
let NERDShutUp=1

"------------------------------------
" dash.vim
"------------------------------------
nmap <silent> <leader>d <Plug>DashSearch

" ------------------------------------
" grep.vim
"------------------------------------
" 検索外のディレクトリ、ファイルパターン
let Grep_Skip_Dirs = '.svn .git .hg'
let Grep_Skip_Files = '*.bak *~'
if has('mac')
  if system('which gxargs')
    let Grep_Xargs_Path = 'gxargs'
  else
    let Grep_Find_Use_Xargs = 0
  endif
endif

"------------------------------------
" surround.vim
"------------------------------------
" s, ssで選択範囲を指定文字でくくる
nmap s <Plug>Ysurround
nmap ss <Plug>Yssurround
let g:surround_{char2nr('e')} = "begin \r end"
let g:surround_{char2nr('m')}    = "~~~ \r ~~~"
let g:surround_{char2nr("-")}    = ":\r"
let g:surround_{char2nr('(')} = "(\r)"
let g:surround_{char2nr('{')} = "{\r}"
let g:surround_{char2nr('[')} = "[\r]"

"------------------------------------
" vim-indent-guides
"------------------------------------
let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 4
let g:indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4

if 'dark' == &background
  hi IndentGuidesOdd  ctermbg=black
  hi IndentGuidesEven ctermbg=darkgrey
else
  hi IndentGuidesOdd  ctermbg=white
  hi IndentGuidesEven ctermbg=lightgrey
endif

"------------------------------------
" gundo.Vim
"------------------------------------
nmap U :<C-u>GundoToggle<CR>

"------------------------------------
" taglist.Vim
"------------------------------------
" 関数一覧
set tags=tags;
"set tags+=~/.tags
if has('mac')
  let g:Ctags_Cmd = '/Applications/MacVim.app/Contents/MacOS/ctags'
else
  let g:Ctags_Cmd = 'ctags'
endif
let g:tagbar_ctags_bin = g:Ctags_Cmd
map <silent> <leader>tl :TagbarToggle<CR>

"------------------------------------
" Srcexp
"------------------------------------
" [Srcexpl] tagsを利用したソースコード閲覧・移動補助機能
let g:SrcExpl_updateTagsCmd =  g:Ctags_Cmd . " -R --sort=foldcase -a ."
let g:SrcExpl_RefreshTime   = 10
let g:SrcExpl_WinHeight     = 9   " プレビューウインドウの高さ
let g:SrcExpl_UpdateTags    = 1
" Source Explorerの機能ON/OFF
nmap src :SrcExplToggle<CR>

"------------------------------------
" open-blowser.vim
"------------------------------------
" カーソル下のURLをブラウザで開く URLじゃなかったらキーワードをググる
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

"------------------------------------
" operator-camelize.vim
"------------------------------------
" camel-caseへの変換
map <Leader>u <Plug>(operator-camelize)<CR>
map <Leader>U <Plug>(operator-decamelize)<CR>

"------------------------------------
" operator-replace.vim
"------------------------------------
" RwなどでYankしてるもので置き換える
map _ <Plug>(operator-replace)

"------------------------------------
" sumartword.vim
"------------------------------------
map W  <Plug>(smartword-w)
map B  <Plug>(smartword-b)
map E  <Plug>(smartword-e)
map ge  <Plug>(smartword-ge)


"------------------------------------
" camelcasemotion.vim
"------------------------------------
" <Shift-wbe>でCameCaseやsnake_case単位での単語移動
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
" text-objectで使用できるように
omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> ie <Plug>CamelCaseMotion_ie
xmap <silent> ie <Plug>CamelCaseMotion_ie

"------------------------------------
" vim smartinput
"------------------------------------
call smartinput#map_to_trigger('i', '<Space>', '<Space>', '<Space>')
call smartinput#define_rule({
  \   'at'    : '(\%#)',
  \   'char'  : '<Space>',
  \   'input' : '<Space><Space><Left>',
  \   })
call smartinput#define_rule({
  \   'at'    : '( \%# )',
  \   'char'  : '<BS>',
  \   'input' : '<Del><BS>',
  \   })

"------------------------------------
" vimfiler.vim
"------------------------------------
" Edit file by tabedit.
let g:vimfiler_safe_mode_by_default = 0
let g:vimfiler_enable_auto_cd = 1
let g:vimfiler_as_default_explorer = 1
let Tlist_Use_Right_Window = 1
nmap <leader>e :VimFiler -buffer-name=explorer -split -simple -winwidth=35 -toggle -no-quit<CR>
nmap <leader>rr <leader>e<Leader>e<c-l>
"デフォルトのキーマッピングを変更
augroup vimrc
  autocmd FileType vimfiler call s:vimfiler_my_settings()
augroup END
function! s:vimfiler_my_settings()
  nmap <buffer> <c-l> <C-W>l
  nmap <buffer> sd gc:!pwd \| pbcopy <CR>
  nmap <buffer> <c-r> <Plug>(vimfiler_redraw_screen)
  nmap <buffer> <c-d> <Plug>(vimfiler_cd_input_directory)
endfunction
function! s:vimfiler_my_exploler()
  if ( argc() == 1 && bufname('%') != 'COMMIT_EDITMSG' && bufname('%') !~ '\vchrome_.+\.md' )
    if ( &filetype != 'markdown' )
      :TagbarOpen
    else
      :Voom
    endif
    :VimFiler -buffer-name=explorer -split -simple -winwidth=35 -toggle -no-quit
  endif
endfunction
" autocmd VimEnter * call s:vimfiler_my_exploler()

"------------------------------------
" unite.vim
"------------------------------------
" The prefix key.
nnoremap    [unite]   <Nop>
nmap    ss [unite]
vmap    ss [unite]
nnoremap [unite]u  :<C-u>Unite -no-split<Space>

"history/yankの有効化
let g:unite_source_history_yank_enable =1
nnoremap <silent> ,gy :<C-u>Unite history/yank<CR>

" 全部乗せ
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -start-insert  -buffer-name=files buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite -start-insert  -buffer-name=files file<CR>
" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite -start-insert  buffer<CR>
" 常用セット
nnoremap <silent> [unite]u  :<C-u>Unite -start-insert  buffer file_mru<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m  :<C-u>Unite -start-insert  file_mru<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir -start-insert  file<CR>
" レジスタ一覧
nnoremap <silent> [unite]r :<C-u>Unite -start-insert -buffer-name=register register<CR>
" yank history
nnoremap <silent> [unite]y :<C-u>Unite -start-insert history/yank<CR>
" mark一覧
nnoremap <silent> [unite]M :<C-u>Unite -start-insert mark<CR>
" command history一覧
nnoremap <silent> [unite]h :<C-u>Unite -start-insert history/command<CR>
" search history一覧
nnoremap <silent> [unite]s :<C-u>Unite -start-insert history/search<CR>
" jump 一覧
nnoremap <silent> [unite]j :<C-u>Unite -start-insert jump<CR>

" Unite keymap
nnoremap <silent> [unite]k :<C-u>Unite -start-insert output:map\|map!\|lmap<CR>

" Unite history/yank
nnoremap <silent> [unite]/ :<C-u>Unite -start-insert history/yank<CR>
nnoremap <silent> [unite]/ :<C-u>Unite -start-insert history/yank<CR>
nnoremap <silent> [unite]J  :<C-u>Unite autojump -start-insert -default-action=lcd<CR>
autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()"{{{
  " Overwrite settings.

  " ESCキーを2回押すと終了する
  nmap <buffer> <ESC>      <Plug>(unite_exit)
  nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  imap <buffer> jj      <Plug>(unite_insert_leave)
  nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
  " Start insert.
  let g:unite_enable_start_insert = 1

  " ウィンドウを分割して開く
  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

  " ウィンドウを縦に分割して開く
  nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
endfunction"}}}

let g:unite_source_file_mru_limit = 200

" unite-plugins
cnoremap UH Unite help<Enter>
cnoremap UO Unite outline<Enter>

"------------------------------------
" quickrun.vim
"------------------------------------
let g:quickrun_config = {}
"runnerをvimprocにする
let g:quickrun_config._ = {'runner' : 'vimproc'}
let g:quickrun_config._ = {'runner/vimproc/updatetime' : 100}
"実行結果は右下に出す
let g:quickrun_config._ = {'split': 'rightbelow 15sp'}
" markdown prevew
" pandoc.css are described in the following gist.
" https://gist.github.com/3663168
let g:quickrun_config['markdown'] = {
  \ 'type': 'markdown/pandoc',
  \ 'outputter': 'browser',
  \ 'cmdopt': '-s -S -i --self-contained --toc -c ~/apdat/other/pandoc.css'
  \ }
let g:quickrun_config['html'] = { 'command' : 'open', 'exec' : '%c %s', 'outputter': 'browser' }

"rvm
if strlen($rvm_bin_path)
  let g:quickrun_config['ruby'] = {
\    'command': 'ruby',
\    'exec': '$rvm_bin_path/ruby %s',
\    'tempfile': '{tempname()}.rb'
\  }
endif
silent! nmap <unique> <F6> <Plug>(quickrun)

"------------------------------------
" Prove.vim
"------------------------------------
nmap <F7> <ESC>:Prove<CR>

"------------------------------------
" Pydiction
"------------------------------------
let g:pydiction_location = '~/.vim/bundle/pydiction/complete-dict'

"------------------------------------
" Syntastic
"------------------------------------
" エラー行をsignで表示する
let g:syntastic_enable_signs = 1
" 可能ならhighligt表示する
let g:syntastic_enable_highlighting = 1
let g:syntastic_auto_jump=1
let g:syntastic_php_checkers=['php', 'phpmd']
let g:syntastic_javascript_checker = "jshint"

"------------------------------------
" toggle.vim
"------------------------------------
nmap <Leader>o <Plug>ToggleN
vmap <Leader>o <Plug>ToggleV

let g:toggle_pairs = { 'and':'or', 'or':'and', 'if':'unless', 'unless':'if', 'yes':'no', 'no':'yes', 'enable':'disable', 'disable':'enable', 'pick':'reword', 'reword':'fixup', 'fixup':'squash', 'squash':'edit', 'edit':'exec', 'exec':'pick' }

"------------------------------------
" fugitive.vim
"------------------------------------
nnoremap <Leader>gd :<C-u>Git diff %<CR>
nnoremap <Leader>gs :<C-u>Gstatus<CR>
nnoremap <Leader>gl :<C-u>Git log %<CR>
nnoremap <Leader>ga :<C-u>Gwrite<CR>
nnoremap <Leader>gc :<C-u>Gcommit<CR>
nnoremap <Leader>gC :<C-u>Git commit --amend<CR>
nnoremap <Leader>gb :<C-u>Gblame<CR>

"------------------------------------
" vim-indent-guides
"------------------------------------
let g:indent_guides_enable_on_vim_startup = 1 " vim立ち上げ時に自動的にvim-indent-guidesをオンにする
let g:indent_guides_start_level           = 1 " 1インデント目からガイドする
let g:indent_guides_auto_colors           = 0 " 自動カラーを無効にして手動で設定する
let g:indent_guides_guide_size            = 1 " ガイドの幅
" let g:indent_guides_guide_size = &tabstop     " ガイド幅をインデント幅に合わせる
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=darkgrey ctermbg=grey
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=grey39   ctermbg=darkgrey

"------------------------------------
" EasyMotion.vim
"------------------------------------
let g:EasyMotion_leader_key = 's'
let g:EasyMotion_mapping_f = 'f'
let g:EasyMotion_mapping_t = 't'
let g:EasyMotion_mapping_F = 'F'
let g:EasyMotion_mapping_T = 'T'

"------------------------------------
" matchit.vim
"------------------------------------
" 大文字小文字無視
let b:match_ignorecase = 1

"------------------------------------
" TwitVim.vim
"------------------------------------
" twitvimのキーアサイン
" nnoremap <Leader>tw <ESC>:<C-u>CPosttoTwitter<CR>

"------------------------------------
" ref.vim
"------------------------------------
" カーソルしたの英単語の意味を表示する
let g:ref_phpmanual_path = $HOME . '/.vim/refdoc/php-chunked-xhtml'
let g:ref_source_webdict_cmd = 'w3m -dump %s'
let g:ref_source_webdict_sites = {
\   'infoseek': {
\     'url': 'http://dictionary.infoseek.ne.jp/ejword/%s',
\     'line': 15 ,
\   },
\   'never': {
\     'url': 'http://endic.naver.jp/srch/all/N/%s',
\     'line': 37 ,
\   },
\   'weblio': {
\     'url': 'http://ejje.weblio.jp/content/%s',
\     'line': 49 ,
\   },
\   'alc': {
\     'url': 'http://eow.alc.co.jp/search?q=%s',
\     'line': 42 ,
\   },
\ }

nmap <Leader>k :<C-u>Ref  webdict never <C-R>=expand("<cword>")<CR><CR>
vmap <Leader>k y:<C-u>Ref webdict never <C-R>=expand(@")<CR><CR>

"------------------------------------
" vim-powerline
"------------------------------------
let g:Powerline_mode_i  = '挿入'
let g:Powerline_mode_R  = '置換'
let g:Powerline_mode_n  = '通常'
let g:Powerline_mode_v  = 'ビジュアル'
let g:Powerline_mode_V  = '行ビジュアル'
let g:Powerline_mode_cv = '矩形ビジュアル'
let g:Powerline_mode_s  = '選択'
let g:Powerline_mode_S  = '行選択'
let g:Powerline_mode_cs = '矩形選択'

"------------------------------------
" VoOM (markdown outliner)
"------------------------------------
let g:voom_tree_width=60
let g:voom_tree_placement='right'
let g:voom_ft_modes = {'markdown': 'markdown', 'pandoc': 'markdown'}
map <Leader>vm <ESC>:<C-u>VoomToggle<CR>

"------------------------------------
" LeafCage/foldCC foldを見やすく
" http://d.hatena.ne.jp/leafcage/20111223/1324705686
"------------------------------------
set foldtext=FoldCCtext()
set foldcolumn=5
set fillchars=vert:\|
hi Folded gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey30 guifg=Grey80
hi FoldColumn gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue

"------------------------------------
" eregex.vim
"------------------------------------
let g:eregex_forward_delim  = 'M/'
let g:eregex_backward_delim = 'M?'

"------------------------------------
" yonchu/accelerated-smooth-scroll
"------------------------------------
" <C-d>/<C-u> 時のスリープ時間 (msec) : 小さくするとスクロールが早くなります。
" Default : 10
let g:ac_smooth_scroll_du_sleep_time_msec = 0
" <C-f>/<C-b> 時のスリープ時間 (msec) : 小さくするとスクロールが早くなります。
" Default : 10
let g:ac_smooth_scroll_fb_sleep_time_msec = 0

"------------------------------------
" joonty/vdebug
"------------------------------------
let g:vdebug_keymap = {
\    "get_context" : "sc",
\    "eval_under_cursor" : "sv",
\}

"------------------------------------
" /PDV--phpDocumentor-for-Vim
"------------------------------------
nnoremap  sc :call PhpDocSingle()<CR>
vnoremap  sc :call PhpDocRange()<CR>-

"------------------------------------
" vim-tags
"------------------------------------
let g:vim_tags_auto_generate        = 0
let g:vim_tags_directories          = [ '.' ]
let g:vim_tags_gems_tags_command    = g:Ctags_Cmd . ' -R --sort=foldcase -a {DIRECTORY}  2>/dev/null'
let g:vim_tags_project_tags_command = g:Ctags_Cmd . ' -R --sort=foldcase -a {DIRECTORY}  2>/dev/null'
nmap  <Leader>t :TagsGenerate<CR>

"------------------------------------
" Vim-php-cs-fixer
"------------------------------------
let g:php_cs_fixer_path = "/usr/local/bin/php-cs-fixer"
let g:php_cs_fixer_fixers_list = "linefeed,trailing_spaces,unused_use,php_closing_tag,short_tag,return,visibility,phpdoc_params,eof_ending,extra_empty_lines,include,PSR0,controls_spaces,elseif"
nnoremap <silent><leader>pcd :call PhpCsFixerFixDirectory()<CR>
nnoremap <silent><leader>pcf :call PhpCsFixerFixFile()<CR>

"------------------------------------
" python-mode
"------------------------------------
let g:pymode_rope                 = 1
" Documentation
let g:pymode_doc                  = 1
let g:pymode_doc_key              = 'K'
"Linting
let g:pymode_lint                 = 1
let g:pymode_lint_checker         = "pyflakes"
" Auto check on save
let g:pymode_lint_write           = 1
" Support virtualenv
let g:pymode_virtualenv           = 1
" Enable breakpoints plugin
let g:pymode_breakpoint           = 1
let g:pymode_breakpoint_key       = '<leader>b'
" syntax highlighting
let g:pymode_syntax               = 1
let g:pymode_syntax_all           = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors  = g:pymode_syntax_all
" Don't autofold code
let g:pymode_folding              = 1
" pdb起動
command! Pdb :!python -m pdb %

"------------------------------------
" Emmet-vim
"------------------------------------
let g:use_emmet_complete_tag = 1

"------------------------------------
" taskpaper.vim
"------------------------------------
" 色調整
syn match taskpaperDone		/^.*\s@done\(\(\s\|([^)]*)\).*\)\?$/
syn match taskpaperCancelled	/^.*\s@cancelled\(\(\s\|([^)]*)\).*\)\?$/
hi def link  taskpaperDone          Ignore
hi def link  taskpaperCancelled     Ignore
" キーマップとか追加した機能など
function! s:taskpaper_setup()
  " My Funtion : 一括toggle
  function! Toggle_tag_eachline(tag) range
    let l:startpos  = getpos(".")
    call taskpaper#toggle_tag(a:tag,  '')
    for line_cnt in range( a:firstline,  a:lastline )
      call taskpaper#toggle_tag(a:tag,  '')
      call cursor(line_cnt, 0)
    endfor
    call taskpaper#toggle_tag(a:tag,  '')
    call cursor(l:startpos)
  endfunction
  " アーカイブ時にカーソルをその場の位置に固定
  function! Archive_done_and_backpos()
    let l:startpos  = getpos(".")
    echo l:startpos
    call taskpaper#archive_done()
    call setpos('.', l:startpos)
  endfunction
  command! -range -nargs=1 MyToggletageachline <line1>,<line2>call Toggle_tag_eachline(<args>)
  " My settings : キーマップ
  nmap <buffer> <Leader>tD :<C-u>call Archive_done_and_backpos()<CR>
  nmap <buffer> <Leader>tT <Plug>TaskPaperShowToday :<C-u> set foldtext=FoldCCtext() <CR> :<C-u>set foldmethod=manual <CR>
  nmap <buffer> <Leader>tX <Plug>TaskPaperShowCancelled :<C-u> set foldtext=FoldCCtext() <CR> :<C-u>set foldmethod=manual <CR>
  nnoremap <buffer> <silent> <Leader>tn :<C-u>call taskpaper#toggle_tag('now', '')<CR>
  vmap <buffer> <silent> <Leader>tn :MyToggletageachline "now"   <CR>
  vmap <buffer> <silent> <Leader>td :MyToggletageachline "done"  <CR>
  vmap <buffer> <silent> <Leader>tt :MyToggletageachline "today" <CR>
  vmap <buffer> <silent> <Leader>te :MyToggletageachline "evernote" <CR>
  nmap <buffer> <silent> <Leader>tc :!echo task count: $( egrep '@today' % \|egrep -v '@done'\|wc -l  )<CR>
  nmap <buffer> <silent> <Leader>tr :e %<CR>
endfunction
augroup vimrc-taskpaper
autocmd!
autocmd FileType taskpaper call s:taskpaper_setup()
augroup END

