scriptencoding utf-8
"/-------------------------------------------------------------------------------
" プラグインごとの設定 Plugins
"-------------------------------------------------------------------------------

"------------------------------------
" operator-replace.vim
"------------------------------------
" RwなどでYankしてるもので置き換える
map _ <Plug>(operator-replace)

"------------------------------------
" Align
"------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"------------------------------------
" NERD_commenter.vim
"------------------------------------
" コメントの間にスペースを空ける
let g:NERDSpaceDelims = 1
"<Leader>xでコメントをトグル(NERD_commenter.vim)
map <Leader>x <Leader>c<space>
""未対応ファイルタイプのエラーメッセージを表示しない
let g:NERDShutUp      = 1
""カスタムdelimiters
let g:NERDCustomDelimiters = {
    \ 'terraform': { 'left': '#', 'leftAlt': 'FOO', 'rightAlt': 'BAR' },
    \ 'plantuml': { 'left': '''', 'leftAlt': 'FOO', 'rightAlt': 'BAR' }
\ }
"------------------------------------
" dash.vim
"------------------------------------
nmap <silent> <leader><leader>d <Plug>DashSearch

"------------------------------------
" surround.vim
"------------------------------------
" s, ssで選択範囲を指定文字でくくる
nmap s <Plug>Ysurround
nmap ss <Plug>Yssurround
let g:surround_{char2nr('e')} = "begin \r end"
let g:surround_{char2nr('m')} = "~~~ \r ~~~"
let g:surround_{char2nr("-")} = ":\r"
let g:surround_{char2nr('(')} = "(\r)"
let g:surround_{char2nr('{')} = "{\r}"
let g:surround_{char2nr('[')} = "[\r]"

"------------------------------------
" mbbill/undotree
"------------------------------------
nmap U :UndotreeToggle<cr>

"------------------------------------
" tagbar
"------------------------------------
" 関数一覧
set tags=tags;
"set tags+=~/.tags
if has('mac')
  let g:Ctags_Cmd = '/usr/local/bin/ctags'
else
  let g:Ctags_Cmd = 'ctags'
endif
let g:tagbar_ctags_bin = g:Ctags_Cmd
map <silent> <leader>tl :TagbarToggle<CR>
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

"------------------------------------
" sumartword.vim
"------------------------------------
map W  <Plug>(smartword-w)
map B  <Plug>(smartword-b)
map E  <Plug>(smartword-e)
map ge  <Plug>(smartword-ge)

"------------------------------------
" camelcasemotion.vim
"------------------------------------
" <Shift-wbe>でCameCaseやsnake_case単位での単語移動
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
" text-objectで使用できるように
omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> ie <Plug>CamelCaseMotion_ie
xmap <silent> ie <Plug>CamelCaseMotion_ie

"------------------------------------
" vim smartinput
"------------------------------------
call smartinput#map_to_trigger('i', '<Space>', '<Space>', '<Space>')
call smartinput#define_rule({
  \   'at'    : '(\%#)',
  \   'char'  : '<Space>',
  \   'input' : '<Space><Space><Left>',
  \   })
call smartinput#define_rule({
  \   'at'    : '( \%# )',
  \   'char'  : '<BS>',
  \   'input' : '<Del><BS>',
  \   })

"------------------------------------
" vimfiler.vim
"------------------------------------
" Edit file by tabedit.
let g:vimfiler_safe_mode_by_default = 0
let g:vimfiler_enable_auto_cd       = 1
let g:vimfiler_as_default_explorer  = 1
let g:Tlist_Use_Right_Window        = 1
nmap <leader>e :VimFiler -buffer-name=explorer -split -simple -winwidth=35 -toggle -no-quit<CR>
nmap <leader>rr <leader>e<Leader>e<c-l>
"デフォルトのキーマッピングを変更
augroup vimrc
  autocmd FileType vimfiler call s:vimfiler_my_settings()
augroup END
function! s:vimfiler_my_settings()
  nmap <buffer> <c-l> <C-W>l
  nmap <buffer> sd gc:!pwd \| pbcopy <CR>
  nmap <buffer> <c-r> <Plug>(vimfiler_redraw_screen)
  nmap <buffer> <c-d> <Plug>(vimfiler_cd_input_directory)
endfunction
function! s:vimfiler_my_exploler()
  if ( argc() == 1 && bufname('%') !=? 'COMMIT_EDITMSG' && bufname('%') !~? '\vchrome_.+\.md' )
    if ( &filetype !=? 'markdown' )
      :TagbarOpen
    else
      :Voom
    endif
    :VimFiler -buffer-name=explorer -split -simple -winwidth=35 -toggle -no-quit
  endif
endfunction
" autocmd VimEnter * call s:vimfiler_my_exploler()

"------------------------------------
" fzf.vim
"------------------------------------
" The prefix key.
nnoremap    [fzf]   <Nop>
nmap    ss [fzf]
vmap    ss [fzf]

" ファイル一覧
nnoremap <silent> [fzf]f  :<C-u>Files<CR>
" バッファ一覧
nnoremap <silent> [fzf]b  :<C-u>Buffers<CR>
" 常用セット
nnoremap <silent> [fzf]u  :<C-u>History<CR>
" mark一覧
nnoremap <silent> [fzf]m :<C-u>Marks<CR>
" command history一覧
nnoremap <silent> [fzf]h :<C-u>History:<CR>
" search history一覧
nnoremap <silent> [fzf]s :<C-u>History/<CR>
" keymap
nnoremap <silent> [fzf]k :<C-u>Maps<CR>
" neosnippet
nnoremap <silent> [fzf]n :<C-u>Snippets<CR>
" line
nnoremap <silent> [fzf]l :<C-u>BLines<CR>
" line
nnoremap <silent> [fzf]t :<C-u>Filetypes<CR>
" Outline with coc.nvim
nnoremap <silent> [fzf]o :<C-u>CocList outline<CR>

"------------------------------------
" quickrun.vim
"------------------------------------
if !exists('g:quickrun_config')
    let g:quickrun_config = {}
endif
"runnerをvimprocにする
let g:quickrun_config._ = {'runner' : 'vimproc'}
let g:quickrun_config._ = {'runner/vimproc/updatetime' : 40}
"実行結果は右下に出す
let g:quickrun_config._ = {'split': 'rightbelow 15sp'}

"------------------------------------
" markdown prevew
"------------------------------------
" pandoc.css are described in the following gist.
" https://gist.github.com/3663168
let g:quickrun_config['markdown'] = {
  \ 'type': 'markdown/pandoc',
  \ 'outputter': 'browser',
  \ 'cmdopt': '-s -S -i --self-contained --toc -c ~/apdat/other/pandoc.css'
  \ }
let g:quickrun_config['html'] = { 'command' : 'open', 'exec' : '%c %s', 'outputter': 'browser' }

silent! nmap <unique> <F6> <Plug>(quickrun)

"------------------------------------
" fugitive.vim
"------------------------------------
nnoremap <Leader>gd :<C-u>Gdiff<CR>
nnoremap <Leader>gs :<C-u>Git<CR>
nnoremap <Leader>gl :<C-u>Git log %<CR>
nnoremap <Leader>ga :<C-u>Gwrite<CR>
nnoremap <Leader>gc :<C-u>Git commit<CR>
nnoremap <Leader>gC :<C-u>Git commit --amend<CR>
nnoremap <Leader>gb :<C-u>Git blame<CR>

"------------------------------------
" vim-indent-guides
"------------------------------------
let g:indent_guides_enable_on_vim_startup = 1 " vim立ち上げ時に自動的にvim-indent-guidesをオンにする
let g:indent_guides_start_level           = 1 " 1インデント目からガイドする
let g:indent_guides_auto_colors           = 0 " 自動カラーを無効にして手動で設定する
let g:indent_guides_guide_size            = 1 " ガイドの幅
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=darkgrey ctermbg=grey
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=grey39   ctermbg=darkgrey

" let g:indent_guides_guide_size = &tabstop     " ガイド幅をインデント幅に合わせる

"------------------------------------
" vim-easymotion
"------------------------------------
" Do not rely on default bidings.
let g:EasyMotion_do_mapping = 0
" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1
" keep cursor column with `JK` motions
let g:EasyMotion_startofline = 0
" General Configuration
let g:EasyMotion_keys = 'HKLYUIOPNM.,QWERTASDGZXCVBJF'
" Show target key with upper case to improve readability
let g:EasyMotion_use_upper = 1
" Jump to first match with enter & space
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1
" custom for Colorscheme
hi EasyMotionTarget ctermbg=none ctermfg=green
" keymap
map  sb <Plug>(easymotion-b)
map  sj <Plug>(easymotion-j)
map  sk <Plug>(easymotion-k)
map  se <Plug>(easymotion-e)
map  sE <Plug>(easymotion-E)
map  sw <Plug>(easymotion-bd-w)
nmap sw <Plug>(easymotion-overwin-w)
map  sl <Plug>(easymotion-bd-jk)
nmap sl <Plug>(easymotion-overwin-line)
map  sf <Plug>(easymotion-bd-f)
nmap sf <Plug>(easymotion-overwin-f)
vmap st <Plug>(easymotion-bd-f2)
nmap st <Plug>(easymotion-overwin-f2)
map  s/ <Plug>(incsearch-easymotion-/)
map  s? <Plug>(incsearch-easymotion-?)

"------------------------------------
" Bundle 'haya14busa/incsearch.vim'
"------------------------------------
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map z/ <Plug>(incsearch-easymotion-/)
map z? <Plug>(incsearch-easymotion-?)
map zg/ <Plug>(incsearch-easymotion-stay)

"------------------------------------
" matchit.vim
"------------------------------------
" 大文字小文字無視
let b:match_ignorecase = 1

"------------------------------------
" vim-airline
"------------------------------------
let g:airline_powerline_fonts = 1
let g:airline_theme="dark"
set ambiwidth=double
let g:airline#extensions#tabline#enabled = 1
let g:airline_highlighting_cache = 1
"------------------------------------
" VoOM (markdown outliner)
"------------------------------------
let g:voom_tree_width     = 60
let g:voom_tree_placement = 'right'
let g:voom_ft_modes       = {'markdown': 'markdown', 'pandoc': 'markdown'}
let g:voom_user_command = "python3 import voom_addons"
map <Leader>vm <ESC>:<C-u>VoomToggle<CR>

"------------------------------------
" eregex.vim
"------------------------------------
let g:eregex_forward_delim  = 'M/'
let g:eregex_backward_delim = 'M?'

"------------------------------------
" python
"------------------------------------
" pdb起動
command! Pdb :!python -m pdb %
" yapf
let g:yapf_style = 'pep8'
nnoremap <leader>y :call Yapf()<cr>
" isort
autocmd FileType python nnoremap <leader>i :!isort %<CR><CR>

"------------------------------------
" pydocstring
"------------------------------------
let g:pydocstring_enable_mapping = 0
nmap <silent><Leader>l  <Plug>(pydocstring)

"------------------------------------
" Emmet-vim
"------------------------------------
let g:use_emmet_complete_tag = 1

"------------------------------------
" taskpaper.vim
"------------------------------------
" 色調整
syn match taskpaperDone		/^.*\s@done\(\(\s\|([^)]*)\).*\)\?$/
syn match taskpaperCancelled	/^.*\s@cancelled\(\(\s\|([^)]*)\).*\)\?$/
hi def link  taskpaperDone          Ignore
hi def link  taskpaperCancelled     Ignore
" キーマップとか追加した機能など
function! s:taskpaper_setup()
  " My Funtion : 一括toggle
  function! Toggle_tag_eachline(tag) range
    let l:startpos  = getpos('.')
    call taskpaper#toggle_tag(a:tag,  '')
    for l:line_cnt in range( a:firstline,  a:lastline )
      call taskpaper#toggle_tag(a:tag,  '')
      call cursor(l:line_cnt, 0)
    endfor
    call taskpaper#toggle_tag(a:tag,  '')
    call cursor(l:startpos)
  endfunction
  " アーカイブ時にカーソルをその場の位置に固定
  function! Archive_done_and_backpos()
    let l:startpos  = getpos('.')
    echo l:startpos
    call taskpaper#archive_done()
    call setpos('.', l:startpos)
  endfunction
  command! -range -nargs=1 MyToggletageachline <line1>,<line2>call Toggle_tag_eachline(<args>)
  " My settings : キーマップ
  nmap <buffer> <silent> <Leader>tD :<C-u>call Archive_done_and_backpos()<CR>
  nmap <buffer> <silent> <Leader>tT <Plug>TaskPaperShowToday :<C-u> set foldtext=FoldCCtext() <CR> :<C-u>set foldmethod=manual <CR>
  nmap <buffer> <silent> <Leader>tX <Plug>TaskPaperShowCancelled :<C-u> set foldtext=FoldCCtext() <CR> :<C-u>set foldmethod=manual <CR>
  nnoremap <buffer> <silent> <Leader>tn :<C-u>call taskpaper#toggle_tag('now', '')<CR>
  vmap <buffer> <silent> <Leader>tn :MyToggletageachline "now"   <CR>
  vmap <buffer> <silent> <Leader>td :MyToggletageachline "done"  <CR>
  vmap <buffer> <silent> <Leader>tt :MyToggletageachline "today" <CR>
  vmap <buffer> <silent> <Leader>te :MyToggletageachline "evernote" <CR>
  nmap <buffer> <silent> <Leader>tc :!echo task count: $( egrep '@today' % \|egrep -v '@done'\|wc -l  )<CR>
  nmap <buffer> <silent> <Leader>tr :e %<CR>
endfunction
augroup vimrc-taskpaper
autocmd!
autocmd FileType taskpaper call s:taskpaper_setup()
augroup END

"------------------------------------
" vim-goimports
"------------------------------------
let g:goimports_simplify = 1
let g:goimports_show_loclist = 0

"------------------------------------
" vim-delve.vim
"------------------------------------
nmap <silent> <Leader>9 :DlvToggleBreakpoint<CR>
nmap <silent> <Leader>8 :DlvClearAll<CR>
nmap <silent> <Leader>5 :DlvDebug<CR>
nmap <silent> <Leader>4 :DlvTest<CR>

"------------------------------------
" plasticboy/vim-markdown
"------------------------------------
let g:markdown_fenced_languages = ['html', 'javascript' , 'python', 'bash=sh', 'go', 'ruby' , 'perl', 'php', 'vim', 'json', 'yaml', 'terraform', 'sql']

"------------------------------------
" kh3phr3n/python-syntax
"------------------------------------
let python_highlight_all = 1

"------------------------------------
" hashivim/vim-terraform
"------------------------------------
let g:terraform_fmt_on_save = 1

"------------------------------------
" junegunn/rainbow_parentheses.vim
"------------------------------------
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{',  '}']]"
augroup rainbow_lisp
  autocmd!
  autocmd BufEnter * RainbowParentheses
augroup END

"------------------------------------
" 'vim-test/vim-test'
"------------------------------------
let g:test#strategy = 'dispatch'
nmap <silent> <Leader>t :TestFile<CR>

"------------------------------------
" buoto/gotests-vim
"------------------------------------
nmap <silent> <Leader>ct :GoTests<CR>
nmap <silent> <Leader>cT :GoTestsAll<CR>

