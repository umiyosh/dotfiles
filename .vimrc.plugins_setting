"-------------------------------------------------------------------------------
" プラグインごとの設定 Plugins
"-------------------------------------------------------------------------------

"------------------------------------
" Align
"------------------------------------
" Alignを日本語環境で使用するための設定
let g:Align_xstrlen = 3

"------------------------------------
" NERD_commenter.vim
"------------------------------------
" コメントの間にスペースを空ける
let NERDSpaceDelims = 1
"<Leader>xでコメントをトグル(NERD_commenter.vim)
map <Leader>x <Leader>c<space>
""未対応ファイルタイプのエラーメッセージを表示しない
let NERDShutUp=1

" ------------------------------------
" grep.vim
"------------------------------------
" 検索外のディレクトリ、ファイルパターン
let Grep_Skip_Dirs = '.svn .git .hg'
let Grep_Skip_Files = '*.bak *~'
if has('mac')
  if system('which gxargs')
    let Grep_Xargs_Path = 'gxargs'
  else
    let Grep_Find_Use_Xargs = 0
  endif
endif

" ------------------------------------
" QFixGrep
"------------------------------------
"QFixGrepコマンドのキーマップ
let MyGrep_Key  = ','

"------------------------------------
" surround.vim
"------------------------------------
" s, ssで選択範囲を指定文字でくくる
nmap s <Plug>Ysurround
nmap ss <Plug>Yssurround
let g:surround_{char2nr('e')} = "begin \r end"
let g:surround_{char2nr('m')} = "~~~ \r ~~~"
let g:surround_{char2nr("-")} = ":\r"

"------------------------------------
" vim-indent-guides
"------------------------------------
nnoremap <silent> <Space>id :<C-u>IndentGuidesToggle<Enter>
let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 4
let g:indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4

if 'dark' == &background
    hi IndentGuidesOdd  ctermbg=black
    hi IndentGuidesEven ctermbg=darkgrey
else
    hi IndentGuidesOdd  ctermbg=white
    hi IndentGuidesEven ctermbg=lightgrey
endif

"------------------------------------
" gundo.Vim
"------------------------------------
nmap U :<C-u>GundoToggle<CR>

"------------------------------------
" taglist.Vim
"------------------------------------
" 関数一覧
set tags=tags;
"set tags+=~/.tags
if has('mac')
  let Tlist_Ctags_Cmd = '/Applications/MacVim.app/Contents/MacOS/ctags' " ctagsのパス
endif
let Tlist_Show_One_File = 1               " 現在編集中のソースのタグしか表示しない
let Tlist_Exit_OnlyWindow = 1             " taglistのウィンドーが最後のウィンドーならばVimを閉じる
" let Tlist_Use_Right_Window = 1            " 右側でtaglistのウィンドーを表示
let Tlist_Enable_Fold_Column = 1          " 折りたたみ
let Tlist_Auto_Open = 1                   " 自動表示
let Tlist_Auto_Update = 1
let Tlist_WinWidth = 30
let tlist_php_settings = 'php;c:class;d:constant;f:function'
map <silent> <leader>tl :Tlist<CR>        " taglistを開くショットカットキー

"------------------------------------
" Srcexp
"------------------------------------
" [Srcexpl] tagsを利用したソースコード閲覧・移動補助機能
let g:SrcExpl_updateTagsCmd = ";" " 自動更新しないようにしたいけどやりかたがわからないので。。
let g:SrcExpl_RefreshTime   = 0   " 自動表示するまでの時間(0:off)
let g:SrcExpl_WinHeight     = 9   " プレビューウインドウの高さ
" Source Explorerの機能ON/OFF
nmap <F8> :SrcExplToggle<CR>

"------------------------------------
" open-blowser.vim
"------------------------------------
" カーソル下のURLをブラウザで開く URLじゃなかったらキーワードをググる
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

"------------------------------------
" operator-camelize.vim
"------------------------------------
" camel-caseへの変換
map <Leader>u <Plug>(operator-camelize)<CR>
map <Leader>U <Plug>(operator-decamelize)<CR>

"------------------------------------
" operator-replace.vim
"------------------------------------
" RwなどでYankしてるもので置き換える
map _ <Plug>(operator-replace)

"------------------------------------
" sumartword.vim
"------------------------------------
map W  <Plug>(smartword-w)
map B  <Plug>(smartword-b)
map E  <Plug>(smartword-e)
map ge  <Plug>(smartword-ge)


"------------------------------------
" camelcasemotion.vim
"------------------------------------
" <Shift-wbe>でCameCaseやsnake_case単位での単語移動
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
" text-objectで使用できるように
omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> ie <Plug>CamelCaseMotion_ie
xmap <silent> ie <Plug>CamelCaseMotion_ie

"------------------------------------
" vimshell
"------------------------------------
let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
let g:vimshell_right_prompt = 'vimshell#vcs#info("(%s)-[%b]", "(%s)-[%b|%a]")'
let g:vimshell_enable_smart_case = 1

if has('win32') || has('win64')
  " Display user name on Windows.
  let g:vimshell_prompt = $USERNAME."% "
else
  " Display user name on Linux.
  let g:vimshell_prompt = $USER."% "

  call vimshell#set_execute_file('bmp,jpg,png,gif', 'gexe eog')
  call vimshell#set_execute_file('mp3,m4a,ogg', 'gexe amarok')
  let g:vimshell_execute_file_list['zip'] = 'zipinfo'
  call vimshell#set_execute_file('tgz,gz', 'gzcat')
  call vimshell#set_execute_file('tbz,bz2', 'bzcat')
endif

function! g:my_chpwd(args, context)
  call vimshell#execute('echo "chpwd"')
endfunction
function! g:my_emptycmd(cmdline, context)
  call vimshell#execute('echo "emptycmd"')
  return a:cmdline
endfunction
function! g:my_preprompt(args, context)
  call vimshell#execute('echo "preprompt"')
endfunction
function! g:my_preexec(cmdline, context)
  call vimshell#execute('echo "preexec"')

  if a:cmdline =~# '^\s*diff\>'
    call vimshell#set_syntax('diff')
  endif
  return a:cmdline
endfunction

autocmd FileType vimshell
\ call vimshell#altercmd#define('g', 'git')
\| call vimshell#altercmd#define('i', 'iexe')
\| call vimshell#altercmd#define('l', 'll')
\| call vimshell#altercmd#define('ll', 'ls -l')
\| call vimshell#hook#set('chpwd', ['g:my_chpwd'])
\| call vimshell#hook#set('emptycmd', ['g:my_emptycmd'])
\| call vimshell#hook#set('preprompt', ['g:my_preprompt'])
\| call vimshell#hook#set('preexec', ['g:my_preexec'])

command! Vs :VimShell


"------------------------------------
" unite.vim
"------------------------------------
" The prefix key.
nnoremap    [unite]   <Nop>
nmap    <space><space>  [unite]

nnoremap [unite]u  :<C-u>Unite -no-split<Space>

" 全部乗せ
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir  -buffer-name=files buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite  -buffer-name=files file<CR>
" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite  buffer<CR>
" 常用セット
nnoremap <silent> [unite]u  :<C-u>Unite  buffer file_mru<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m  :<C-u>Unite  file_mru<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir  file<CR>
" レジスタ一覧
nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>
" mark一覧
nnoremap <silent> [unite]M :<C-u>Unite mark<CR>

autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()"{{{
  " Overwrite settings.

  " ESCキーを2回押すと終了する
  nmap <buffer> <ESC>      <Plug>(unite_exit)
  nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  imap <buffer> jj      <Plug>(unite_insert_leave)
  nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
  " Start insert.
  let g:unite_enable_start_insert = 1

  " ウィンドウを分割して開く
  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

  " ウィンドウを縦に分割して開く
  nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
endfunction"}}}

let g:unite_source_file_mru_limit = 200

" unite-plugins
cnoremap UH Unite help<Enter>
cnoremap UO Unite outline<Enter>

"------------------------------------
" quickrun.vim
"------------------------------------
let g:quickrun_config = {}
"runnerをvimprocにする
let g:quickrun_config._ = {'runner' : 'vimproc'}
let g:quickrun_config._ = {'runner/vimproc/updatetime' : 100}
"実行結果は右下に出す
let g:quickrun_config._ = {'split': 'rightbelow 15sp'}
" markdown prevew
" pandoc.css are described in the following gist.
" https://gist.github.com/3663168
let g:quickrun_config['markdown'] = {
      \ 'type': 'markdown/pandoc',
      \ 'outputter': 'browser',
      \ 'cmdopt': '-s -S -i --self-contained --toc -c ~/apdat/other/pandoc.css'
      \ }

"rvm
if strlen($rvm_bin_path)
  let g:quickrun_config['ruby'] = {
\    'command': 'ruby',
\    'exec': '$rvm_bin_path/ruby %s',
\    'tempfile': '{tempname()}.rb'
\  }
endif
silent! nmap <unique> <F6> <Plug>(quickrun)

"------------------------------------
" Prove.vim
"------------------------------------
nmap <F7> <ESC>:Prove<CR>

"------------------------------------
" Pydiction
"------------------------------------
let g:pydiction_location = '~/.vim/bundle/pydiction/complete-dict'

"------------------------------------
" Syntastic
"------------------------------------
" エラー行をsignで表示する
let g:syntastic_enable_signs = 1
" 可能ならhighligt表示する
let g:syntastic_enable_highlighting = 1
let g:syntastic_auto_jump=1

"------------------------------------
" toggle.vim
"------------------------------------
nmap <Leader>o <Plug>ToggleN
vmap <Leader>o <Plug>ToggleV

let g:toggle_pairs = { 'and':'or', 'or':'and', 'if':'unless', 'unless':'if', 'yes':'no', 'no':'yes', 'enable':'disable', 'disable':'enable', 'pick':'reword', 'reword':'fixup', 'fixup':'squash', 'squash':'edit', 'edit':'exec', 'exec':'pick' }

"------------------------------------
" fugitive.vim
"------------------------------------
nnoremap <Leader>gd :<C-u>Gdiff<CR>
nnoremap <Leader>gs :<C-u>Gstatus<CR>
nnoremap <Leader>gl :<C-u>Git log %<CR>
nnoremap <Leader>ga :<C-u>Gwrite<CR>
nnoremap <Leader>gc :<C-u>Gcommit<CR>
nnoremap <Leader>gC :<C-u>Git commit --amend<CR>
nnoremap <Leader>gb :<C-u>Gblame<CR>

"------------------------------------
" vim-indent-guides
"------------------------------------
let g:indent_guides_enable_on_vim_startup = 1 " vim立ち上げ時に自動的にvim-indent-guidesをオンにする
let g:indent_guides_start_level           = 1 " 1インデント目からガイドする
let g:indent_guides_auto_colors           = 0 " 自動カラーを無効にして手動で設定する
let g:indent_guides_guide_size            = 1 " ガイドの幅
" let g:indent_guides_guide_size = &tabstop     " ガイド幅をインデント幅に合わせる
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=darkgrey ctermbg=grey
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=grey39   ctermbg=darkgrey

"------------------------------------
" EasyMotion.vim
"------------------------------------
let g:EasyMotion_leader_key = '<space>'
let g:EasyMotion_mapping_f = 'f'
let g:EasyMotion_mapping_t = 't'
let g:EasyMotion_mapping_F = 'F'
let g:EasyMotion_mapping_T = 'T'

"------------------------------------
" matchit.vim
"------------------------------------
" 大文字小文字無視
let b:match_ignorecase = 1

"------------------------------------
" TwitVim.vim
"------------------------------------
" twitvimのキーアサイン
nnoremap <Leader>tw <ESC>:<C-u>CPosttoTwitter<CR>

"------------------------------------
" ref.vim
"------------------------------------
" カーソルしたの英単語の意味を表示する
" http://d.hatena.ne.jp/thinca/20120512/1336761779

let g:ref_phpmanual_path = $HOME . '/.vim/refdoc/php-chunked-xhtml'
map <Leader>gx :Ref webdict alc <C-R>=expand("<cword>")<CR><CR>
let g:ref_source_webdict_sites = {
\   'alc': 'http://eow.alc.co.jp/search?q=%s',
\   'sanseido' : 'http://www.sanseido.net/User/Dic/Index.aspx?TWords=%s&st=0&DORDER=&DailyEJ=checkbox',
\   'weblio': 'http://ejje.weblio.jp/content/%s',
\ }

"------------------------------------
" NERDtree
"------------------------------------
"TODO 分割したウィンドウのサイズ
let NERDTreeWinPos="right"
let NERDTreeWinSize=30
"TODO NERDTreeToggle キーマップ
nmap <Leader>N <ESC>:NERDTreeToggle<CR>
"見た目など
let g:NERDTreeShowHidden=1
let g:NERDTreeMinimalUI=1
let g:NERDTreeDirArrows=0
let g:NERDTreeMouseMode=2

"------------------------------------
" vim-powerline
"------------------------------------
let g:Powerline_mode_i = '挿入'
let g:Powerline_mode_R = '置換'
let g:Powerline_mode_n = '通常'
let g:Powerline_mode_v = 'ビジュアル'
let g:Powerline_mode_V = '行ビジュアル'
let g:Powerline_mode_cv = '矩形ビジュアル'
let g:Powerline_mode_s = '選択'
let g:Powerline_mode_S = '行選択'
let g:Powerline_mode_cs = '矩形選択'

"------------------------------------
" VoOM (markdown outliner)
"------------------------------------
let g:voom_tree_width=60
let g:voom_ft_modes = {'markdown': 'markdown', 'pandoc': 'markdown'}
map <Leader>vm <ESC>:<C-u>VoomToggle<CR>

"------------------------------------
" LeafCage/foldCC foldを見やすく
" http://d.hatena.ne.jp/leafcage/20111223/1324705686
"------------------------------------
set foldtext=FoldCCtext()
set foldcolumn=5
set fillchars=vert:\|
hi Folded gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey30 guifg=Grey80
hi FoldColumn gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue

"------------------------------------
" taskpaper.vim
"------------------------------------
" 色調整
syn match taskpaperDone		/^.*\s@done\(\(\s\|([^)]*)\).*\)\?$/
syn match taskpaperCancelled	/^.*\s@cancelled\(\(\s\|([^)]*)\).*\)\?$/
hi def link  taskpaperDone          Ignore
hi def link  taskpaperCancelled     Ignore
" キーマップとか追加した機能など
function! s:taskpaper_setup()
  " My Funtion : 一括toggle
  function! Toggle_tag_eachline(tag) range
      let l:startpos  = getpos(".")
      call taskpaper#toggle_tag(a:tag,  '')
      for line_cnt in range( a:firstline,  a:lastline )
        call taskpaper#toggle_tag(a:tag,  '')
        call cursor(line_cnt, 0)
      endfor
      call taskpaper#toggle_tag(a:tag,  '')
      call cursor(l:startpos)
  endfunction
  " アーカイブ時にカーソルをその場の位置に固定
  function! Archive_done_and_backpos()
      let l:startpos  = getpos(".")
      echo l:startpos
      call taskpaper#archive_done()
      call setpos('.', l:startpos)
  endfunction
  command! -range -nargs=1 MyToggletageachline <line1>,<line2>call Toggle_tag_eachline(<args>)
  " My settings : キーマップ
  nmap <buffer> <Leader>tD :<C-u>call Archive_done_and_backpos()<CR>
  nmap <buffer> <Leader>tT <Plug>TaskPaperShowToday :<C-u> set foldtext=FoldCCtext() <CR> :<C-u>set foldmethod=manual <CR>
  nmap <buffer> <Leader>tX <Plug>TaskPaperShowCancelled :<C-u> set foldtext=FoldCCtext() <CR> :<C-u>set foldmethod=manual <CR>
  nnoremap <buffer> <silent> <Leader>tn :<C-u>call taskpaper#toggle_tag('now', '')<CR>
  vmap <buffer> <silent> <Leader>tn :MyToggletageachline "now"   <CR>
  vmap <buffer> <silent> <Leader>td :MyToggletageachline "done"  <CR>
  vmap <buffer> <silent> <Leader>tt :MyToggletageachline "today" <CR>
  vmap <buffer> <silent> <Leader>te :MyToggletageachline "evernote" <CR>
  nmap <buffer> <silent> <Leader>tc :!echo task count: $( egrep '@today' % \|egrep -v '@done'\|wc -l  )<CR>
  nmap <buffer> <silent> <Leader>tr :e %<CR>
endfunction
augroup vimrc-taskpaper
autocmd!
autocmd FileType taskpaper call s:taskpaper_setup()
augroup END

