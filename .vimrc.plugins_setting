scriptencoding utf-8
"/-------------------------------------------------------------------------------
" プラグインごとの設定 Plugins
"-------------------------------------------------------------------------------

"------------------------------------
" operator-replace.vim
"------------------------------------
" RwなどでYankしてるもので置き換える
map _ <Plug>(operator-replace)

"------------------------------------
" Align
"------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"------------------------------------
" NERD_commenter.vim
"------------------------------------
" コメントの間にスペースを空ける
let g:NERDSpaceDelims = 1
"<Leader>xでコメントをトグル(NERD_commenter.vim)
map <Leader>x <Leader>c<space>
""未対応ファイルタイプのエラーメッセージを表示しない
let g:NERDShutUp      = 1
""カスタムdelimiters
let g:NERDCustomDelimiters = {
    \ 'terraform': { 'left': '#', 'leftAlt': 'FOO', 'rightAlt': 'BAR' },
    \ 'plantuml': { 'left': '''', 'leftAlt': 'FOO', 'rightAlt': 'BAR' }
\ }
"------------------------------------
" dash.vim
"------------------------------------
nmap <silent> <leader><leader>d <Plug>DashSearch

"------------------------------------
" surround.vim
"------------------------------------
" s, ssで選択範囲を指定文字でくくる
nmap s <Plug>Ysurround
nmap ss <Plug>Yssurround
let g:surround_{char2nr('e')} = "begin \r end"
let g:surround_{char2nr('m')} = "~~~ \r ~~~"
let g:surround_{char2nr("-")} = ":\r"
let g:surround_{char2nr('(')} = "(\r)"
let g:surround_{char2nr('{')} = "{\r}"
let g:surround_{char2nr('[')} = "[\r]"

"------------------------------------
" mbbill/undotree
"------------------------------------
nmap U :UndotreeToggle<cr>

"------------------------------------
" vista.vim
"------------------------------------
map <silent> <leader>tl :Vista coc<CR>
let g:vista#renderer#enable_icon = 1

"------------------------------------
" sumartword.vim
"------------------------------------
map W  <Plug>(smartword-w)
map B  <Plug>(smartword-b)
map E  <Plug>(smartword-e)
map ge  <Plug>(smartword-ge)

"------------------------------------
" camelcasemotion.vim
"------------------------------------
" <Shift-wbe>でCameCaseやsnake_case単位での単語移動
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
" text-objectで使用できるように
omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> ie <Plug>CamelCaseMotion_ie
xmap <silent> ie <Plug>CamelCaseMotion_ie

"------------------------------------
" lambdalisue/fern.vim
"------------------------------------
"" https://github.com/lambdalisue/fern.vim/wiki/Tips#how-to-customize-fern-buffer
" disable s <Plug>(fern-action-open:select) keymap because I use s key for hop.vim and easymotion
function! s:init_fern() abort
  nmap <buffer> s s
endfunction
augroup fern-custom
  autocmd! *
  autocmd FileType fern call s:init_fern()
augroup END

nnoremap <leader>e :Fern . -reveal=% -drawer -toggle -width=40<CR>
augroup my-glyph-palette
  autocmd! *
  autocmd FileType fern call glyph_palette#apply()
  autocmd FileType nerdtree,startify call glyph_palette#apply()
augroup END
let g:fern#renderer = 'nerdfont'
let g:fern_disable_startup_warnings = 1

"------------------------------------
" fzf.vim
"------------------------------------
" custom jumplist command
" https://github.com/junegunn/fzf.vim/issues/865#issuecomment-955740371
function GoTo(jumpline)
  let values = split(a:jumpline, ":")
  execute "e ".values[0]
  call cursor(str2nr(values[1]), str2nr(values[2]))
  execute "normal zvzz"
endfunction

function GetLine(bufnr, lnum)
  let lines = getbufline(a:bufnr, a:lnum)
  if len(lines)>0
    return trim(lines[0])
  else
    return ''
  endif
endfunction

function! Jumps()
  " Get jumps with filename added
  let jumps = map(reverse(copy(getjumplist()[0])),
    \ { key, val -> extend(val, {'name': getbufinfo(val.bufnr)[0].name }) })

  let jumptext = map(copy(jumps), { index, val ->
      \ (val.name).':'.(val.lnum).':'.(val.col+1).': '.GetLine(val.bufnr, val.lnum) })

  call fzf#run(fzf#vim#with_preview(fzf#wrap({
        \ 'source': jumptext,
        \ 'column': 1,
        \ 'options': ['--delimiter', ':', '--bind', 'alt-a:select-all,alt-d:deselect-all', '--preview-window', '+{2}-/2'],
        \ 'sink': function('GoTo')})))
endfunction
command! Jumps call Jumps()

" The prefix key.
nnoremap    [fzf]   <Nop>
nmap    ss [fzf]
vmap    ss [fzf]

" ファイル一覧
nnoremap <silent> [fzf]f  :<C-u>Files<CR>
nnoremap <silent> [fzf]F  :<C-u>GitFiles<CR>
" バッファ一覧
nnoremap <silent> [fzf]b  :<C-u>Buffers<CR>
" 常用セット
nnoremap <silent> [fzf]u  :<C-u>History<CR>
" mark一覧
nnoremap <silent> [fzf]m :<C-u>Marks<CR>
" command history一覧
nnoremap <silent> [fzf]h :<C-u>History:<CR>
" search history一覧
nnoremap <silent> [fzf]s :<C-u>History/<CR>
" alll symbols
nnoremap <silent> [fzf]a :<C-u>CocFzfList symbols<CR>
" keymap
nnoremap <silent> [fzf]k :<C-u>Maps<CR>
" neosnippet
nnoremap <silent> [fzf]n :<C-u>Snippets<CR>
" line
nnoremap <silent> [fzf]l :<C-u>BLines<CR>
" line
nnoremap <silent> [fzf]t :<C-u>Filetypes<CR>
" Outline
nnoremap <silent> [fzf]o :<C-u>Vista finder coc<CR>
if has('nvim')
" Diagnostic with coc.nvim
nnoremap <silent> [fzf]d :<C-u>CocDiagnostics<CR>
else
nnoremap <silent> [fzf]d :<C-u>CocList diagnostics<CR>
endif
" jumplist
nnoremap <silent> [fzf]j :Jumps<cr>

"------------------------------------
" quickrun.vim
"------------------------------------
if !exists('g:quickrun_config')
    let g:quickrun_config = {}
endif
"runnerをvimprocにする
let g:quickrun_config._ = {'runner' : 'vimproc'}
let g:quickrun_config._ = {'runner/vimproc/updatetime' : 40}
"実行結果は右下に出す
let g:quickrun_config._ = {'split': 'rightbelow 15sp'}

"------------------------------------
" markdown prevew
"------------------------------------
" pandoc.css are described in the following gist.
" https://gist.github.com/3663168
let g:quickrun_config['markdown'] = {
  \ 'type': 'markdown/pandoc',
  \ 'outputter': 'browser',
  \ 'cmdopt': '-s -S -i --self-contained --toc -c ~/apdat/other/pandoc.css'
  \ }
let g:quickrun_config['html'] = { 'command' : 'open', 'exec' : '%c %s', 'outputter': 'browser' }

silent! nmap <unique> <F6> <Plug>(quickrun)

"------------------------------------
" fugitive.vim
"------------------------------------
nnoremap <Leader>gd :<C-u>Gdiff<CR>
nnoremap <Leader>gs :<C-u>Git<CR>
nnoremap <Leader>gl :<C-u>Git log %<CR>
nnoremap <Leader>ga :<C-u>Gwrite<CR>
nnoremap <Leader>gc :<C-u>Git commit<CR>
nnoremap <Leader>gC :<C-u>Git commit --amend<CR>
nnoremap <Leader>gb :<C-u>Git blame<CR>

if !has('nvim')
  "------------------------------------
  " vim-indent-guides
  "------------------------------------
  let g:indent_guides_enable_on_vim_startup = 1 " vim立ち上げ時に自動的にvim-indent-guidesをオンにする
  let g:indent_guides_start_level           = 1 " 1インデント目からガイドする
  let g:indent_guides_auto_colors           = 0 " 自動カラーを無効にして手動で設定する
  let g:indent_guides_guide_size            = 1 " ガイドの幅
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=darkgrey ctermbg=grey
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=grey39   ctermbg=darkgrey
endif

" let g:indent_guides_guide_size = &tabstop     " ガイド幅をインデント幅に合わせる

if has('nvim')
  " keymap for hop.nvim
  map  sb :HopWordBC<CR>
  vmap sb <cmd>HopWordBC<CR>
  map  sj :HopLineAC<CR>
  vmap sj <cmd>HopLineAC<CR>
  map  sk :HopLineBC<CR>
  vmap sk <cmd>HopLineBC<CR>
  map  se :HopWordAC<CR>
  vmap se <cmd>HopWordAC<CR>
  map  sw :HopWord<CR>
  nmap sw :HopWord<CR>
  vmap sw <cmd>HopWord<CR>
  map  sl :HopLine<CR>
  nmap sl :HopLine<CR>
  vmap  sl <cmd>HopLine<CR>
  map  sf :HopChar1<CR>
  nmap sf :HopChar1<CR>
  vmap st <cmd>HopChar1<CR>
  map  s/ :HopPattern<CR>
  vmap s/ <cmd>HopPattern<CR>
else
  "------------------------------------
  " vim-easymotion
  "------------------------------------
  " Do not rely on default bidings.
  let g:EasyMotion_do_mapping = 0
  " Turn on case sensitive feature
  let g:EasyMotion_smartcase = 1
  " keep cursor column with `JK` motions
  let g:EasyMotion_startofline = 0
  " General Configuration
  let g:EasyMotion_keys = 'HKLYUIOPNM.,QWERTASDGZXCVBJF'
  " Show target key with upper case to improve readability
  let g:EasyMotion_use_upper = 1
  " Jump to first match with enter & space
  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1
  " custom for Colorscheme
  hi EasyMotionTarget ctermbg=none ctermfg=green
  " keymap for easymotion
  map  sb <Plug>(easymotion-b)
  map  sj <Plug>(easymotion-j)
  map  sk <Plug>(easymotion-k)
  map  se <Plug>(easymotion-e)
  map  sE <Plug>(easymotion-E)
  map  sw <Plug>(easymotion-bd-w)
  nmap sw <Plug>(easymotion-overwin-w)
  map  sl <Plug>(easymotion-bd-jk)
  nmap sl <Plug>(easymotion-overwin-line)
  map  sf <Plug>(easymotion-bd-f)
  nmap sf <Plug>(easymotion-overwin-f)
  vmap st <Plug>(easymotion-bd-f2)
  nmap st <Plug>(easymotion-overwin-f2)
  map  s/ <Plug>(incsearch-easymotion-/)
  map  s? <Plug>(incsearch-easymotion-?)
endif

"------------------------------------
" Bundle 'haya14busa/incsearch.vim'
"------------------------------------
if has('nvim')
  " https://github.com/easymotion/vim-easymotion/issues/408
  " https://github.com/haya14busa/incsearch.vim/issues/79
  map <leader>/  <Plug>(incsearch-forward)
  map <leader>?  <Plug>(incsearch-backward)
else
  map /   <Plug>(incsearch-forward)
  map ?   <Plug>(incsearch-backward)
endif

map g/ <Plug>(incsearch-stay)
map z/ <Plug>(incsearch-easymotion-/)
map z? <Plug>(incsearch-easymotion-?)
map zg/ <Plug>(incsearch-easymotion-stay)

"------------------------------------
" vim-airline
"------------------------------------
let g:airline_powerline_fonts = 1
let g:airline_theme="dark"
if has('nvim')
  let g:airline#extensions#tabline#enabled = 0
else
  let g:airline#extensions#tabline#enabled = 1
endif
let g:airline_highlighting_cache = 1
"------------------------------------
" VoOM (markdown outliner)
"------------------------------------
let g:voom_tree_width     = 60
let g:voom_tree_placement = 'right'
let g:voom_ft_modes       = {'markdown': 'markdown', 'pandoc': 'markdown'}
let g:voom_user_command = "python3 import voom_addons"
map <Leader>vm <ESC>:<C-u>VoomToggle<CR>

"------------------------------------
" eregex.vim
"------------------------------------
let g:eregex_forward_delim  = 'M/'
let g:eregex_backward_delim = 'M?'

"------------------------------------
" python
"------------------------------------
" pdb起動
command! Pdb :!python -m pdb %
" yapf
let g:yapf_style = 'pep8'
nnoremap <leader>Y :call Yapf()<cr>
" isort
autocmd FileType python nnoremap <leader>i :!isort %<CR><CR>

"------------------------------------
" pydocstring
"------------------------------------
let g:pydocstring_enable_mapping = 0
nmap <silent><Leader>l  <Plug>(pydocstring)

"------------------------------------
" Emmet-vim
"------------------------------------
let g:use_emmet_complete_tag = 1

"------------------------------------
" taskpaper.vim
"------------------------------------
" 色調整
syn match taskpaperDone		/^.*\s@done\(\(\s\|([^)]*)\).*\)\?$/
syn match taskpaperCancelled	/^.*\s@cancelled\(\(\s\|([^)]*)\).*\)\?$/
hi def link  taskpaperDone          Ignore
hi def link  taskpaperCancelled     Ignore
" キーマップとか追加した機能など
function! s:taskpaper_setup()
  " My Funtion : 一括toggle
  function! Toggle_tag_eachline(tag) range
    let l:startpos  = getpos('.')
    call taskpaper#toggle_tag(a:tag,  '')
    for l:line_cnt in range( a:firstline,  a:lastline )
      call taskpaper#toggle_tag(a:tag,  '')
      call cursor(l:line_cnt, 0)
    endfor
    call taskpaper#toggle_tag(a:tag,  '')
    call cursor(l:startpos)
  endfunction
  " アーカイブ時にカーソルをその場の位置に固定
  function! Archive_done_and_backpos()
    let l:startpos  = getpos('.')
    echo l:startpos
    call taskpaper#archive_done()
    call setpos('.', l:startpos)
  endfunction
  command! -range -nargs=1 MyToggletageachline <line1>,<line2>call Toggle_tag_eachline(<args>)
  " My settings : キーマップ
  nmap <buffer> <silent> <Leader>tD :<C-u>call Archive_done_and_backpos()<CR>
  nmap <buffer> <silent> <Leader>tT <Plug>TaskPaperShowToday :<C-u> set foldtext=FoldCCtext() <CR> :<C-u>set foldmethod=manual <CR>
  nmap <buffer> <silent> <Leader>tX <Plug>TaskPaperShowCancelled :<C-u> set foldtext=FoldCCtext() <CR> :<C-u>set foldmethod=manual <CR>
  nnoremap <buffer> <silent> <Leader>tn :<C-u>call taskpaper#toggle_tag('now', '')<CR>
  vmap <buffer> <silent> <Leader>tn :MyToggletageachline "now"   <CR>
  vmap <buffer> <silent> <Leader>td :MyToggletageachline "done"  <CR>
  vmap <buffer> <silent> <Leader>tt :MyToggletageachline "today" <CR>
  vmap <buffer> <silent> <Leader>te :MyToggletageachline "evernote" <CR>
  nmap <buffer> <silent> <Leader>tc :!echo task count: $( egrep '@today' % \|egrep -v '@done'\|wc -l  )<CR>
  nmap <buffer> <silent> <Leader>tr :e %<CR>
endfunction
augroup vimrc-taskpaper
autocmd!
autocmd FileType taskpaper call s:taskpaper_setup()
augroup END

"------------------------------------
" vim-goimports
"------------------------------------
let g:goimports_simplify = 1
let g:goimports_show_loclist = 0
let g:goimports_simplify_cmd = 'gofumpt'

"------------------------------------
" vim-delve.vim
"------------------------------------
nmap <silent> <Leader>9 :DlvToggleBreakpoint<CR>
nmap <silent> <Leader>8 :DlvClearAll<CR>
nmap <silent> <Leader>5 :DlvDebug<CR>
nmap <silent> <Leader>4 :DlvTest<CR>

"------------------------------------
" plasticboy/vim-markdown
"------------------------------------
let g:markdown_fenced_languages = ['html', 'javascript' , 'python', 'bash=sh', 'go', 'ruby' , 'perl', 'php', 'vim', 'json', 'yaml', 'terraform', 'sql']

"------------------------------------
" kh3phr3n/python-syntax
"------------------------------------
let python_highlight_all = 1

"------------------------------------
" hashivim/vim-terraform
"------------------------------------
let g:terraform_fmt_on_save = 1

"------------------------------------
" 'vim-test/vim-test'
"------------------------------------
let g:test#strategy = 'dispatch'
nmap <silent> <Leader>t :TestFile<CR>

"------------------------------------
" buoto/gotests-vim
"------------------------------------
nmap <silent> <Leader>ct :GoTests<CR>
nmap <silent> <Leader>cT :GoTestsAll<CR>


" ------------------------------------
" RRethy/vim-illuminate
" ------------------------------------
let g:Illuminate_useDeprecated = 1
if has('nvim')
augroup illuminate_augroup
    autocmd!
    autocmd VimEnter * hi illuminatedWord cterm=underline,bold guibg=DarkMagenta
augroup END
else
augroup illuminate_augroup
    autocmd!
    autocmd VimEnter * hi illuminatedWord cterm=underline,bold gui=undercurl,bold ctermbg=19
augroup END
endif

"------------------------------------
" haya14busa/vim-asterisk
"------------------------------------
map *  <Plug>(asterisk-z*)

"------------------------------------
" tyru/open-browser.vim
"------------------------------------
" My setting.
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

"------------------------------------
" madox2/vim-ai
"------------------------------------
" let g:vim_ai_chat['options']['model'] = 'gpt-4'
let g:vim_ai_chat = {
\  "options": {
\    "model": "gpt-4-1106-preview",
\    "temperature": 0.2,
\    "initial_prompt": "日本語で回答すること",
\  },
\}

" copilot.vim enable to write markdown and gitcommit
let g:copilot_filetypes = {
\ 'markdown': v:true,
\ 'yaml': v:true,
\ 'gitcommit': v:true,
\ }

let g:rainbow_delimiters = {
    \ 'strategy': {
        \ '': rainbow_delimiters#strategy.global,
        \ 'vim': rainbow_delimiters#strategy.local,
    \ },
    \ 'query': {
        \ '': 'rainbow-delimiters',
        \ 'lua': 'rainbow-blocks',
    \ },
    \ 'highlight': [
        \ 'RainbowDelimiterRed',
        \ 'RainbowDelimiterYellow',
        \ 'RainbowDelimiterBlue',
        \ 'RainbowDelimiterOrange',
        \ 'RainbowDelimiterGreen',
        \ 'RainbowDelimiterViolet',
        \ 'RainbowDelimiterCyan',
    \ ],
\ }

"------------------------------------
" neovim plugin settings
" 'lukas-reineke/indent-blankline.nvim
" 'nvim-treesitter/nvim-treesitter'
" 'p00f/nvim-ts-rainbow'
" 'phaazon/hop.nvim'
"------------------------------------
if has('nvim')
lua <<EOF
require'hop'.setup()
vim.opt.list = true
vim.opt.listchars:append("space:⋅")
vim.opt.listchars:append("eol:↴")

local highlight = {
    "RainbowRed",
    "RainbowYellow",
    "RainbowBlue",
    "RainbowOrange",
    "RainbowGreen",
    "RainbowViolet",
    "RainbowCyan",
}
local hooks = require "ibl.hooks"
-- create the highlight groups in the highlight setup hook, so they are reset
-- every time the colorscheme changes
hooks.register(hooks.type.HIGHLIGHT_SETUP, function()
    vim.api.nvim_set_hl(0, "RainbowRed", { fg = "#E06C75" })
    vim.api.nvim_set_hl(0, "RainbowYellow", { fg = "#E5C07B" })
    vim.api.nvim_set_hl(0, "RainbowBlue", { fg = "#61AFEF" })
    vim.api.nvim_set_hl(0, "RainbowOrange", { fg = "#D19A66" })
    vim.api.nvim_set_hl(0, "RainbowGreen", { fg = "#98C379" })
    vim.api.nvim_set_hl(0, "RainbowViolet", { fg = "#C678DD" })
    vim.api.nvim_set_hl(0, "RainbowCyan", { fg = "#56B6C2" })
end)
require("ibl").setup {
  indent = {
    char = "│",
    tab_char = "│",
    highlight = { "Function", "Label" },
    smart_indent_cap = true,
    priority = 2,
  },
  scope = {
      enabled = true,
      show_start = true,
      show_end = true,
  },
}
hooks.register(hooks.type.SCOPE_HIGHLIGHT, hooks.builtin.scope_highlight_from_extmark)

require'nvim-treesitter.configs'.setup {
  ensure_installed = "all",
  highlight = {
    enable = true,
    disable = {},
  },
}
require("bufferline").setup{
  options = {
    diagnostics = "coc",
    diagnostics_indicator = function(count, level, diagnostics_dict, context)
      local icon = level:match("error") and " " or " "
      return " " .. icon .. count
    end,
    themable = true,
    color_icons = true,
    offsets = {
      {
        filetype = "fern",
        text = function()
          return vim.fn.getcwd()
        end,
        highlight = "Directory",
        text_align = "left"
      }
    }

  }
}
require('hlargs').setup()
require'colorizer'.setup()

require'nvim-treesitter.configs'.setup {
  matchup = {
    enable = true,              -- mandatory, false will disable the whole extension
    -- disable = { "c", "ruby" },  -- optional, list of language that will be disabled
    -- [options]
  },
}
EOF
" fzf selction like a easymotion
nnoremap <silent> sB :BufferLinePick<CR>
endif


