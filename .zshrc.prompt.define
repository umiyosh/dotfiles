# The MIT License

# Copyright (c) 2009-2013 Robby Russell and contributors (see https://github.com/robbyrussell/oh-my-zsh/contributors)

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

function addColor() {
  if [[ $# -lt 2 ]]; then
    echo ""
    return
  fi
  strings=$1
  color=$2
  echo "%{$fg_bold[$color]%}${strings}%{$reset_color%}"
}

ZSH_THEME_GIT_PROMPT_STASH_COUNT_BEFORE="%{$fg[yellow]%} 【%{$fg[green]%}♻ "
ZSH_THEME_GIT_PROMPT_STASH_COUNT_AFTER="%{$fg[yellow]%}】"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[green]%} ✔  "
ZSH_THEME_PROMPT_RETURNCODE_PREFIX="%{$fg_bold[red]%}"
ZSH_THEME_GIT_PROMPT_PREFIX=" $fg[white]‹ %{$fg_bold[yellow]%}"
ZSH_THEME_GIT_PROMPT_AHEAD="%{$fg_bold[magenta]%} ↑ "
ZSH_THEME_GIT_PROMPT_STAGED="%{$fg_bold[green]%} ✎  "
ZSH_THEME_GIT_PROMPT_UNSTAGED="%{$fg_bold[red]%} ✎  "
ZSH_THEME_GIT_PROMPT_UNTRACKED="%{$fg_bold[red]%} ？ "
ZSH_THEME_GIT_PROMPT_UNMERGED="%{$fg_bold[red]%}✕"
ZSH_THEME_GIT_PROMPT_SUFFIX=" $fg_bold[white]›%{$reset_color%}"
ZSH_THEME_KUBERNETES_PROMPT_PREFIX="$(addColor '⎈ ' blue)=>: "
ZSH_THEME_DOCKER_PROMPT_PREFIX="┊🐳 =>: "
ZSH_THEME_DOCKER_PROMPT_SUFFIX="┊ "
ZSH_THEME_GCP_PROMPT_PREFIX="$(addColor "g" blue)=>: "
ZSH_THEME_GCP_PROMPT_SUFFIX="┊ "

function currentBranch() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || \
      ref=$(git rev-parse --short HEAD 2> /dev/null) || return
  echo ${ref#refs/heads/}
}

function myCurrentBranch() {
  echo $(currentBranch || echo "(no branch)")
}

function myGitPrompt() {
  tester=$(git rev-parse --git-dir 2> /dev/null) || return

  INDEX=$(git status --porcelain 2> /dev/null)
  STATUS=""

  # is branch ahead?
  if $(echo "$(git log origin/$(currentBranch)..HEAD 2> /dev/null)" | grep '^commit' &> /dev/null); then
    STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_AHEAD"
  fi

  # is anything staged?
  if $(echo "$INDEX" | grep -E -e '^(D[ M]|[MARC][ MD]) ' &> /dev/null); then
    STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_STAGED"
  fi

  # is anything unstaged?
  if $(echo "$INDEX" | grep -E -e '^[ MARC][MD] ' &> /dev/null); then
    STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_UNSTAGED"
  fi

  # is anything untracked?
  if $(echo "$INDEX" | grep '^?? ' &> /dev/null); then
    STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_UNTRACKED"
  fi

  # is anything unmerged?
  if $(echo "$INDEX" | grep -E -e '^(A[AU]|D[DU]|U[ADU]) ' &> /dev/null); then
    STATUS="$STATUS$ZSH_THEME_GIT_PROMPT_UNMERGED"
  fi

  if [[ ! -n $(git status -s 2> /dev/null) ]]; then
    STATUS="$ZSH_THEME_GIT_PROMPT_CLEAN"
  fi

  if [[ -n $STATUS ]]; then
    STATUS=" $STATUS"
  fi

  echo "$ZSH_THEME_GIT_PROMPT_PREFIX$(myCurrentBranch)$STATUS$ZSH_THEME_GIT_PROMPT_SUFFIX"
}

function sshConnection() {
  if [[ -n $SSH_CONNECTION ]]; then
    echo $(addColor "(ssh) " red)
  fi
}

# git stash count
function gitPromptStashCount(){
  COUNT=$(git stash list 2>/dev/null | wc -l | tr -d ' ')
  if [ "$COUNT" -gt 0 ]; then
    echo "$ZSH_THEME_GIT_PROMPT_STASH_COUNT_BEFORE$COUNT$ZSH_THEME_GIT_PROMPT_STASH_COUNT_AFTER"
  fi
}

function getDockerMachine() {
  if [[ "$DOCKER_MACHINE_NAME" != "" ]]; then
    prompt_docker_machine="${ZSH_THEME_DOCKER_PROMPT_PREFIX}$(addColor ${DOCKER_MACHINE_NAME} cyan)${ZSH_THEME_DOCKER_PROMPT_SUFFIX}"
  else
    prompt_docker_machine="${ZSH_THEME_DOCKER_PROMPT_PREFIX}$(addColor "NOTHING" black)${ZSH_THEME_DOCKER_PROMPT_SUFFIX}"
  fi
  echo $prompt_docker_machine
}

function getKubeCluster() {
  if which kubectl >/dev/null; then
    clusterInfo=$(kubectl config view --minify 2>/dev/null)
    if [[ $? -ne 0 ]]; then
      clusterInfo="NOTHING"
      clusterInfo=$(addColor $clusterInfo black)
    else
      clusterInfo=$(echo $clusterInfo |egrep cluster:|egrep -v '^-'|awk '{print $NF}')
    fi
  else
    clusterInfo=$(addColor $clusterInfo black)
  fi
  if [[ $clusterInfo =~ "prd" ]]; then
    clusterInfo=$(addColor $clusterInfo red)
  else
    clusterInfo=$(addColor $clusterInfo cyan)
  fi
  echo ${ZSH_THEME_KUBERNETES_PROMPT_PREFIX}${clusterInfo}${ZSH_THEME_DOCKER_PROMPT_SUFFIX}
}

function currentTime() {
  # local time, color coded by last return code
  timeEnabled="%(?.%{$fg[green]%}.%{$fg[red]%})%*%{$reset_color%}"
  echo $timeEnabled
}

function getStatus() {
  retStatus="%(?:%{$fg_bold[green]%}:%{$fg_bold[red]%})%?%{$reset_color%}"
  echo $retStatus
}

function getHost() {
  currenthost=$(addColor "%n@%m" green)
  echo $currenthost
}

function getCurrntDir() {
  currentDir=$(addColor "%~" blue)
  echo $currentDir
}

function getCurrntGcpConf() {
  gconf=~/.config/gcloud/active_config
  if [[ -f $gconf ]]; then
    gcpconf=$(cat $gconf)
    gcpconf=$(addColor $gcpconf cyan)
  else
    gcpconf="NOTHING"
    gcpconf=$(addColor $gcpconf black)
  fi
  echo ${ZSH_THEME_GCP_PROMPT_PREFIX}${gcpconf}${ZSH_THEME_GCP_PROMPT_SUFFIX}
}

function powerline_prompt() {
  # powerline-go -error $? -shell zsh
  powerline-shell.py $? --shell zsh 2> /dev/null
}

function promptTermination() {
:
}

function makePrompt() {
cat <<PROMPT_TEMPLATE

$(getDockerMachine)$(getKubeCluster)$(getCurrntGcpConf)
$(powerline_prompt)

PROMPT_TEMPLATE
}

# $(powerline_prompt)
PROMPT=$'$(makePrompt)'

