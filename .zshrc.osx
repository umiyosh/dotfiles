# osx alias
alias pbc='pbcopy'

# Terminal Colorの設定
export CLICOLOR=1
export LSCOLORS=ExFxCxDxBxegedabagacad

function preexec() {
    typeset -gi CALCTIME=1
    typeset -gi CMDSTARTTIME=SECONDS
    PRE_FULL_CMD=${1}
    PRE_CMD=$( basename ${1%% *}  )
}
function precmd() {
  # 直前のコマンドの終了ステータスを保持
  PRE_RESULT=$?

  if (( CALCTIME )); then
    # コマンド実行開始からの経過秒数を計算
    typeset -gi ETIME=SECONDS-CMDSTARTTIME
    if [ $ETIME -ge 5 ]; then
      # ビープ音を抑制するコマンドのリストを配列で定義
      local IGNORE_CMDS_BEEP=( \
          pet ackv afp agv cdr f fd fp fu \
          gc gco git gpb gping gpl gpr gps \
          help K k k9s kc kco ki kn kns kp \
          krkd ks l less lpe man modd mpe \
          nvim p ping pk pt psql rgv s top tovim \
          tig vi vim nvim view vr mb \
          cl clc clw clr \
        )

      local token
      local beep_flag=1
      # shellcheck disable=SC2296
      for token in ${(z)PRE_FULL_CMD}; do
        if (( ${IGNORE_CMDS_BEEP[(Ie)${token}]} )); then
          beep_flag=0
          break
        fi
      done

      # 結果の表示（成功の場合は緑、失敗の場合は赤）
      if [ $PRE_RESULT -eq 0 ]; then
        echo $fg[green] "[INFO] $PRE_FULL_CMD cmd \n normal end \n elapse: $ETIME [sec]"
      else
        echo $fg[red] "[ERROR] $PRE_FULL_CMD cmd \n fail: $PRE_RESULT \n elapse: $ETIME [sec]"
        notif "[ERROR] $PRE_FULL_CMD cmd \n fail: $PRE_RESULT \n elapse: $ETIME [sec]"
      fi

      # ビープ音の実行（対象でなければ）
      if (( beep_flag )); then
        beep
      fi
    fi
  fi

  # CALCTIME フラグをリセット
  typeset -gi CALCTIME=0
}
# automjump
## alternative "brew --prefix". Because it's too slow
export BREW_PREFIX=${BREW_PREFIX:-$(dirname $(dirname $(which brew)))}
[[ -s ${BREW_PREFIX}/etc/profile.d/autojump.sh ]] && . ${BREW_PREFIX}/etc/profile.d/autojump.sh

# eval "$(direnv hook zsh)"

alias pw=$HOME/dotfiles/bin/ppwrapper

if hash mvim; then
    export EDITOR=~/dotfiles/bin/editor.sh
else
    export EDITOR='vim'
fi

